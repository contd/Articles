[{
  "_id": {
    "$oid": "599dbee53a35526adc921a2e"
  },
  "title": "3 Things We Learned Building a Chatbot for Slack",
  "url": "https://medium.com/@kipsearch/3-things-we-learned-building-a-chatbot-for-slack-2dc32321d77c#.v5mabd9ri",
  "excerpt": "Kip is a chatbot that helps you save time by doing all the shopping for you and your team. Integrating with Slack was a logical choice, we’re Slack users and wanted a simple, efficient way of team&hellip;",
  "date_saved": "Sat Jul 16 18:10:58 EDT 2016",
  "content": "<section name=\"099f\" class=\" section--body section--first section--last\" score=\"41.25\"><div class=\"section-content\" score=\"32.5\"><div class=\"section-inner layoutSingleColumn\" score=\"-51.25\"><figure name=\"6091\" id=\"6091\" class=\"graf--figure graf-after--h3\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*0Z6s5C7jDFI7NxF83SAuqQ.png\"></div></figure><p name=\"2cf0\" id=\"2cf0\" class=\"graf--p graf-after--figure\"><a href=\"http://kipthis.com\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Kip</a> is a chatbot that helps you save time by doing all the shopping for you and your team. Integrating with Slack was a logical choice, we’re Slack users and wanted a simple, efficient way of team shopping via chatbot.</p><p name=\"a69d\" id=\"a69d\" class=\"graf--p graf-after--p\">Try Kip, click the button below:</p><figure name=\"a7ac\" id=\"a7ac\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*2y0xLJS6dCWYCf5YkJWBdQ@2x.png\"></div><figcaption class=\"imageCaption\">Click me</figcaption></figure><p name=\"2b49\" id=\"2b49\" class=\"graf--p graf-after--figure\">We ran into some interesting issues when building Kip for Slack. We hope you find our solutions useful!</p><p name=\"42f3\" id=\"42f3\" class=\"graf--p graf-after--h3\">Sending emojis across devices can be messy. An emoji sent by you on iOS is displayed differently to someone receiving it on Android. Here are some examples of emoji variation across devices:</p><figure name=\"abca\" id=\"abca\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*2zQO_3OAGSu0UMaq2epm_g.png\"></div><figcaption class=\"imageCaption\">Emoji miscommunication, the new normal</figcaption></figure><p name=\"00a3\" id=\"00a3\" class=\"graf--p graf-after--figure\">Chat platforms have their own way of displaying emojis. If you send the same emoji code to every platform, it will display differently to all users.</p><p name=\"ad50\" id=\"ad50\" class=\"graf--p graf-after--p\">We added a translator into Kip bot so it can speak multiple emoji dialects. Kip sends different emoji codes based on which chat platform (Slack, Facebook, SMS Texting) a user messaged from:</p><figure name=\"0569\" id=\"0569\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*coKtLwFsdUaGF9XyBFU1kg.png\"></div><figcaption class=\"imageCaption\">Emoji translator</figcaption></figure><p name=\"c691\" id=\"c691\" class=\"graf--p graf-after--figure\">Sample translation for numeric emoji (should actually use Redis or similar datastore, thanks <a href=\"https://medium.com/@r3versed\" class=\"markup--anchor markup--p-anchor\">r3versed</a>):</p><figure name=\"778a\" id=\"778a\" class=\"graf--figure graf--iframe graf-after--p\" score=\"-13.75\"></figure><p name=\"1d85\" id=\"1d85\" class=\"graf--p graf-after--figure\">By doing so we hope to avoid miscommunication while still retaining the universal simplicity of an emoji ������.</p><p name=\"e905\" id=\"e905\" class=\"graf--p graf-after--h3\">When we added team shopping to Slack, we ran into a problem where Kip would respond with search results for everything people typed into public channels like #general (quite annoying!).</p><p name=\"b334\" id=\"b334\" class=\"graf--p graf-after--p\">We solved this by sorting incoming Slack messages into <strong class=\"markup--strong markup--p-strong\">direct messages: </strong>one user talking to Kip and <strong class=\"markup--strong markup--p-strong\">public channels:</strong> many users talking to Kip.</p><p name=\"4ef7\" id=\"4ef7\" class=\"graf--p graf-after--p\">Slack sends new chat messages to Kip with an ID <em class=\"markup--em markup--p-em\">(i.e. C5H6YHBN)</em> that represents the channel the message came from. Chats that start with the letter <strong class=\"markup--strong markup--p-strong\">C </strong>are from public channels, while <strong class=\"markup--strong markup--p-strong\">D</strong> are direct messages.</p><p name=\"0244\" id=\"0244\" class=\"graf--p graf-after--p\">If the message is from a public channel, we check the incoming message for the user ID of Kip bot on the team <em class=\"markup--em markup--p-em\">(i.e. U7A8YHVN</em>) so we only respond when someone <strong class=\"markup--strong markup--p-strong\">@</strong> mentions Kip.</p><p name=\"9836\" id=\"9836\" class=\"graf--p graf-after--p\">Example of <strong class=\"markup--strong markup--p-strong\">@Kip</strong> being mentioned in a public channel for a group purchase:</p><figure name=\"49a4\" id=\"49a4\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*oc80nkg2a6KLuXuPAEN1vA.png\"></div></figure><p name=\"e5ef\" id=\"e5ef\" class=\"graf--p graf-after--figure\">Example Node.js code we use for sorting messages:</p><figure name=\"ca3b\" id=\"ca3b\" class=\"graf--figure graf--iframe graf-after--p\" score=\"-13.75\"></figure><figure name=\"4537\" id=\"4537\" class=\"graf--figure graf-after--h3\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*AMtuQ43ObVz1BZOrnmlXSg.gif\"></div></figure><p name=\"4517\" id=\"4517\" class=\"graf--p graf-after--figure\">With Google or Amazon, users now expect instant results. In searches with complicated modifications i.e “<em class=\"markup--em markup--p-em\">similar to option 3 but cheaper and in blue</em>”, Kip suffers a bit of lag. This makes our users impatient.</p><p name=\"c441\" id=\"c441\" class=\"graf--p graf-after--p\">A simple design hack, we send a “typing event” to Slack so it looks like Kip is typing while our bot rushes to respond quickly. Our users say they don’t mind the lag now since they know Kip understands them and is working on it. ������</p><figure name=\"1bf3\" id=\"1bf3\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*CoU6iNAFf530PuDefG0XRw.png\"></div></figure><p name=\"1b73\" id=\"1b73\" class=\"graf--p graf-after--figure\">Sending “typing events” to Slack is not currently available in the Node.js package s<a href=\"https://www.npmjs.com/package/slackbots\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">lackbots</a>, so we extended it by adding this to the package index.js:</p><figure name=\"ae7f\" id=\"ae7f\" class=\"graf--figure graf--iframe graf-after--p\" score=\"-13.75\"></figure><p name=\"983f\" id=\"983f\" class=\"graf--p graf-after--figure\">Using design solutions to solve complex programming issues saved us a lot of time and order of magnitude so that we could launch Kip earlier. In the next post, we’ll be talking about our design process of coming up with AI shopping chatbot persona. Stay tuned!</p><p name=\"bc6e\" id=\"bc6e\" class=\"graf--p graf-after--p\">Try Kip on Slack by tapping the button below or try the demo at <a href=\"http://kipthis.com/chat\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">kipthis.com/chat</a></p><figure name=\"278b\" id=\"278b\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><a href=\"https://slack.com/oauth/authorize?scope=bot&amp;client_id=2804113073.14708197459\" class=\"graf-imageAnchor\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*zl4YeeE7wkyc-dt4apQwKQ.png\"></a></div><figcaption class=\"imageCaption\">Push this button</figcaption></figure><p name=\"d4f5\" id=\"d4f5\" class=\"graf--p graf-after--figure\">If you enjoyed reading, please hit recommend. ������</p></div></div></section>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a2f"
  },
  "title": "Slack + SuperScript — Rise of the Bots",
  "url": "https://medium.com/@rob_ellis/slack-superscript-rise-of-the-bots-bba8506a043c#.5zax6gvkk",
  "excerpt": "This article has been updated to work with SuperScript 0.6.8. If you are interested into Slack+Bots. The SuperScript Editor comes with built-in Slack Support.Two days after I announced&hellip;",
  "date_saved": "Sat Jul 16 18:10:59 EDT 2016",
  "content": "<div score=\"20.0\"><section name=\"06a5\" class=\" section--body section--first\" score=\"41.25\"><div class=\"section-content\" score=\"32.5\"><div class=\"section-inner layoutSingleColumn\" score=\"1.25\"><pre name=\"1b70\" id=\"1b70\" class=\"graf--pre graf-after--h3\">This article has been updated to work with SuperScript 0.6.8. If you are interested into Slack+Bots. The SuperScript Editor comes with built-in Slack Support.</pre><p name=\"3500\" id=\"3500\" class=\"graf--p graf-after--pre\">Two days after I announced <a href=\"https://medium.com/@rob_ellis/superscript-ce40e9720bef\" class=\"markup--anchor markup--p-anchor\">SuperScript</a>&#x200A;&#x2014;&#x200A;A bot engine for creating human like chat bots. <a href=\"http://slackhq.com/post/104688116560/rtm-api\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Slack announces their new RealTime API</a> to enable Bot Developers.</p><p name=\"7096\" id=\"7096\" class=\"graf--p graf-after--p\">This Posts will walk though creating a bot using these two pieces of software and jumps into some of the more interesting corners in SuperScript.</p><p name=\"5c0f\" id=\"5c0f\" class=\"graf--p graf-after--p\">Canadians are oddly fascinated by the weather, lets create a bot that tells us the weather when someone asks.</p><p name=\"6be0\" id=\"6be0\" class=\"graf--p graf-after--p\">To start, we will need to install superscript from NPM and init a new bot, this has been updated to be even easer.</p><pre name=\"8e11\" id=\"8e11\" class=\"graf--pre graf-after--p\">$ npm install superscript -g<br>$ bot-init slackbot --client slack<br>$ cd slackbot <br>$ npm install</pre><p name=\"5877\" id=\"5877\" class=\"graf--p graf-after--pre\">First we install superscript globally from NPM, this allows us to create bots at will using the init command. We then init a new bot called `slackbot` and tell it we want to use the slack client, rather than the telnet client. Finally we install the bot dependancies.</p><p name=\"26ab\" id=\"26ab\" class=\"graf--p graf-after--p\">Next lets head over to Slack and get a token for our bot to use. Keep in mind that Bots will take up one integration slot and you may need to upgrade your plan if you are at your limit.</p><p name=\"e51f\" id=\"e51f\" class=\"graf--p graf-after--p\">You need to be signed in to view the page, visit <a href=\"https://slack.com/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">https://slack.com/</a> and than navigate to integrations, DIY Integrations &amp; Customizations, Bots.</p><p name=\"40a7\" id=\"40a7\" class=\"graf--p graf-after--p\">Finally you will want to give your bot a name, and generate a auth token. Keep this token save, we will need it shortly.</p><p name=\"0e61\" id=\"0e61\" class=\"graf--p graf-after--p\">Back in your terminal, lets open the bot folder with your favourite text editor.</p><p name=\"6d5e\" id=\"6d5e\" class=\"graf--p graf-after--p\">We will need to paste in the token to allow our new bot to connect to our slack team and hang out. By default, it will be in the general channel, but you can invite him to any other channel. Open server.js and paste in your token where it says:</p><pre name=\"d007\" id=\"d007\" class=\"graf--pre graf-after--p\">var token = \"...\";</pre><p name=\"217f\" id=\"217f\" class=\"graf--p graf-after--pre\">The provided boilerplate code has a little etiquette built in, our bot will reply when being spoken to directly or in a DM. We shouldn&#x2019;t need to touch anything.</p><p name=\"4400\" id=\"4400\" class=\"graf--p graf-after--p\">So at this point we really have a working slack bot, we just need to provide it some clever things to say, and you could jump into the <a href=\"http://superscriptjs.com/documentation/scripting\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">scripting guide</a> and do that. But lets forge on and learn about some other neat things.</p><p name=\"0c6d\" id=\"0c6d\" class=\"graf--p graf-after--h3\">Our bot will always start off in the <em class=\"markup--em markup--p-em\">random </em>topic. Lets create a general greeting.</p><p name=\"0f2e\" id=\"0f2e\" class=\"graf--p graf-after--p\">Open the main.ss in your topic folder and lets add a trigger for weather.</p><pre name=\"e45b\" id=\"e45b\" class=\"graf--pre graf-after--p\">?:WH articles bin CAs devops Documents dotfiles gethtml go jason js netdata playground start-thesrc swift thesrc ucii weather *<br>- I'm not near a window.</pre><p name=\"5e77\" id=\"5e77\" class=\"graf--p graf-after--pre\">Okay, now when ever our bot sees &#x201C;weather&#x201D; in a question sentence, it will reply with &#x201C;I&#x2019;m not near a window.&#x201D;</p><p name=\"d104\" id=\"d104\" class=\"graf--p graf-after--p\">We can tests this by compiling the topics and running the bot.</p><pre name=\"68da\" id=\"68da\" class=\"graf--pre graf-after--p\">$ parse <br>$ node server.js</pre><p name=\"11ac\" id=\"11ac\" class=\"graf--p graf-after--pre\">Parse will parse all the conversation in the topic folder down to a data.json file ready for the slack server to read.</p><p name=\"f1e3\" id=\"f1e3\" class=\"graf--p graf-after--h3\">Okay, lets call out to <a href=\"http://openweathermap.org/api\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">OpenWeather API</a> to fetch some real weather data, to do this we need to move our reply to a plugin.</p><p name=\"a395\" id=\"a395\" class=\"graf--p graf-after--p\">First we will change our gambit (trigger and reply) to this:</p><pre name=\"3fc2\" id=\"3fc2\" class=\"graf--pre graf-after--p\">?:WH articles bin CAs devops Documents dotfiles gethtml go jason js netdata playground start-thesrc swift thesrc ucii weather *~2 in *<br>- ^weather()</pre><p name=\"91e6\" id=\"91e6\" class=\"graf--p graf-after--pre\">Next we need to create a plugin called getWeather.</p><p name=\"39d7\" id=\"39d7\" class=\"graf--p graf-after--p\">Create a new file called weather.js and save it in your plugin folder. We will use the following contents.</p><figure name=\"7dad\" id=\"7dad\" class=\"graf--figure graf--iframe graf-after--p\" score=\"-13.75\"></figure><p name=\"f12f\" id=\"f12f\" class=\"graf--p graf-after--figure\">This Gist will export a weather function with a callback that will inject the text back into superscripts reply. So if there is an error in the request or we don&#x2019;t have a name in the message object we just reply with &#x201C;I&#x2019;m not near a window.&#x201D;</p><p name=\"1b2b\" id=\"1b2b\" class=\"graf--p graf-after--p\">Before this will work, we need to add the request module to our package.json</p><pre name=\"ac7f\" id=\"ac7f\" class=\"graf--pre graf-after--p\">$ npm install request &#x2014;save</pre><p name=\"d7b2\" id=\"d7b2\" class=\"graf--p graf-after--pre\">Okay, fire up the bot, and lets see what happens when we say:</p><p name=\"8fea\" id=\"8fea\" class=\"graf--p graf--startsWithDoubleQuote graf-after--p\">&#x201C;What is the weather like in Vancouver?&#x201D;</p><p name=\"f50f\" id=\"f50f\" class=\"graf--p graf-after--h3\">The Open Weather API also exposes temperature data, with the exact same call&#x200A;&#x2014;&#x200A;try to create a temperature function that will return the temperature if asked. If you bot is American, you might want to change the units from metric to imperial.</p><p name=\"86cd\" id=\"86cd\" class=\"graf--p graf-after--h3\">So from here, the next step is to create a triple store of all the cities we know about and use that data to drive the API call for the location. We can be much more clever if asked &#x201C;What is the weather like in the kitchen? I will save that for the next tutorial.</p><p name=\"c75d\" id=\"c75d\" class=\"graf--p graf-after--p graf--last\">I hope you enjoyed this walk though. Please leave comments on <a href=\"http://twitter.com/superscriptjs\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">twitter</a>, or create an issue in <a href=\"https://github.com/silentrob/superscript\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Github</a>.</p></div></div></section><section name=\"5a50\" class=\" section--body section--middleCenter section-image--aspectRatioViewport is-imageBackgrounded is-backgrounded is-darkBackgrounded section--last\" score=\"47.5\"></section></div>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a30"
  },
  "title": "IBM Watson’s Personality Insights and Howdy.AI’s Slackbot tutorial",
  "url": "https://medium.com/@ash_hathaway/ibm-watson-s-personality-insights-and-howdy-ai-s-slackbot-tutorial-be68da6cfa10#.8wzglosgf",
  "excerpt": "Chances are if you work in tech you know what it’s like for your work to not be understood by the vast majority of people. Odd acronyms like API, OKR, or CRM, funny words like SCRUM and backlog, and&hellip;",
  "date_saved": "Sat Jul 16 18:11:01 EDT 2016",
  "content": "<section name=\"7034\" class=\" section--body section--first section--last\" score=\"41.25\"><div class=\"section-content\" score=\"32.5\"><div class=\"section-inner layoutSingleColumn\" score=\"-88.75\"><p name=\"6f38\" id=\"6f38\" class=\"graf--p graf-after--h4\">Chances are if you work in tech you know what it’s like for your work to not be understood by the vast majority of people. Odd acronyms like API, OKR, or CRM, funny words like SCRUM and backlog, and titles like dev evangelist usually take a bit of explaining. I’m pretty confident my entire family has never <em class=\"markup--em markup--p-em\">actually</em> understood what I do. <em class=\"markup--em markup--p-em\">“You make the internet, sweetie. Good job.” </em>Thanks, Mom.</p><p name=\"4c2e\" id=\"4c2e\" class=\"graf--p graf-after--p\">And then you know those times when you find yourself amongst friends and you can just let those acronyms fly without skipping a beat? And find humor in jokes about the CLI or bash scripts (I know, right!?). Well, late last October I found that in the first <a href=\"https://medium.com/why-not/announcing-atx-bot-talk-meet-up-96e203b113a8#.edojo579q\" class=\"markup--anchor markup--p-anchor\">ATX Bot Talk Meetup</a> hosted by <a href=\"http://howdy.ai/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Howdy.AI</a>.</p><p name=\"6a99\" id=\"6a99\" class=\"graf--p graf-after--p\">It was a darn good meetup: A decent sized crowd, but not so many that social anxiety kicks in; friendly with a few familiar faces; good topics and speakers; reminiscing about good ole’ IRC. Pizza. Beer. What more do you need?</p><p name=\"250f\" id=\"250f\" class=\"graf--p graf-after--p\"><a href=\"https://twitter.com/jeffk\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Jeff Kramer</a> presented on how to make your own Slackbot using Python. I’m of course a fan of Slack and thought to myself, “Yeah! That looks fun!” And off I went.</p><p name=\"2927\" id=\"2927\" class=\"graf--p graf-after--p\">Full disclosure—in another life I was a developer. I’ve always enjoyed it but it has been more than a couple years since I was coding day-to-day. And for me it’s not quite like riding a bike. As one friend commented, it’s more like riding a bike that has been sitting in the rain for a few years. Yes, that’s more like it.</p><p name=\"74d9\" id=\"74d9\" class=\"graf--p graf-after--p\">Still, the Slack API is stupid easy to use. IBM Watson’s Personality Insights is easy to use, and with <a href=\"http://howdy.ai/botkit\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Howdy.AI’s botkit</a> even old timers like me can get something going pretty quick.</p><p name=\"8bc0\" id=\"8bc0\" class=\"graf--p graf-after--p\">For this walk-through let’s find the personality of a channel using natural language processing.</p><p name=\"350d\" id=\"350d\" class=\"graf--p graf-after--h4\">First things first, let’s get all of our credentials ready and that handy dandy Slackbot kit using the <a href=\"https://github.com/xoxco/botkit/blob/master/docs/index.md\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">docs</a> here. Make sure you have <a href=\"https://nodejs.org/en/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Node.js</a> and <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">NPM</a></p><figure name=\"34d4\" id=\"34d4\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*AOpps1y3oRERBTQGYh2Lqw.png\"></div></figure><p name=\"d95e\" id=\"d95e\" class=\"graf--p graf-after--figure\">Then head over to Slack and get your bot integration going. For this example I’m going to use our IBMWatsonDevs Slack.</p><p name=\"8f85\" id=\"8f85\" class=\"graf--p graf-after--p\">Go to Integrations:</p><figure name=\"73ae\" id=\"73ae\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*9vvam3w1Fe_p5fLEUYHsLg.png\"></div></figure><p name=\"8255\" id=\"8255\" class=\"graf--p graf-after--figure\">and add your bot to get credentials:</p><figure name=\"012c\" id=\"012c\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*E8FmNNt46yotviW0v8rx4w.png\"></div></figure><p name=\"44e8\" id=\"44e8\" class=\"graf--p graf-after--figure\">Grab your API Token. Give your bot a name &amp; icon.</p><figure name=\"af78\" id=\"af78\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*Zjg2dmWX7tT8_opafzYDtg.png\"></div></figure><p name=\"549f\" id=\"549f\" class=\"graf--p graf-after--figure\">Now let’s get Personality Insights setup. All of IBMWatson’s APIs are hosted through IBM Bluemix, IBM’s PaaS, so our next step is to head over to <a href=\"https://console.ng.bluemix.net/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Bluemix</a>.</p><p name=\"0ea5\" id=\"0ea5\" class=\"graf--p graf-after--p\">Go ahead &amp; signup:</p><figure name=\"ea87\" id=\"ea87\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*dpDGOQez97sVAOI4x0sHXQ.png\"></div></figure><p name=\"8797\" id=\"8797\" class=\"graf--p graf-after--figure\">And then login after you get your IBM ID:</p><figure name=\"abe1\" id=\"abe1\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*O-mP91Y_EcxRWuTHfghEpg.png\"></div></figure><p name=\"fa2c\" id=\"fa2c\" class=\"graf--p graf-after--figure\">Now we need a space to host our Personality Insights service so we can get our credentials. Let’s make a space:</p><figure name=\"14c0\" id=\"14c0\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*dcyi9920TeTsAE9NIXJiQA.png\"></div></figure><p name=\"3487\" id=\"3487\" class=\"graf--p graf-after--figure\">And then add a service:</p><figure name=\"0365\" id=\"0365\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*Nc9sa9xay1xsAi4FmM-Wtw.png\"></div></figure><p name=\"b36d\" id=\"b36d\" class=\"graf--p graf-after--figure\">Now add Personality Insights:</p><figure name=\"587f\" id=\"587f\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*4U6y3gv-FQToMUbTf7MuZg.png\"></div></figure><p name=\"96a6\" id=\"96a6\" class=\"graf--p graf-after--figure\">Now create your space. Be sure to leave the app unbound. Note that Personality Insights has a <a href=\"http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/personality-insights.html\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">few tiers</a> for pricing but is free for the first 100 API calls per month.</p><figure name=\"f4a1\" id=\"f4a1\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*W8rHDV6NGNoB9XwJzCpAyQ.png\"></div></figure><p name=\"52a9\" id=\"52a9\" class=\"graf--p graf-after--figure\">Now you’re able to grab your service credentials. Keep these handy:</p><figure name=\"5b22\" id=\"5b22\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*MHZ5y9AL8EE8Kb_UxifxpA.png\"></div></figure><p name=\"f149\" id=\"f149\" class=\"graf--p graf-after--figure\">Alright, now we’re almost ready to start cookin. Let’s get the IBMWatson <a href=\"https://www.npmjs.com/package/watson-developer-cloud#personality-insights\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Node.js SDK</a></p><figure name=\"901f\" id=\"901f\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*7lH6EMAzTZs43NBpPEwkzg.png\"></div></figure><p name=\"f837\" id=\"f837\" class=\"graf--p graf-after--figure\">So now we have our botkit and Watson ready to go. Let’s get those credentials in there.</p><p name=\"1f99\" id=\"1f99\" class=\"graf--p graf-after--p\">Find the file hello_world_rtm.js from your botkit. Let’s add Personality Insights credentials:</p><figure name=\"7776\" id=\"7776\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*2uR1XdadyB1RcODBLN048Q.png\"></div></figure><p name=\"415a\" id=\"415a\" class=\"graf--p graf-after--figure\">This snippet is where your Slack token is going to get called:</p><figure name=\"c536\" id=\"c536\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*Ak2nQ-cJNbOGu2PCIj1jXA.png\"></div></figure><p name=\"1d9a\" id=\"1d9a\" class=\"graf--p graf-after--figure\">Now, each Slackbot has to be invited to a channel to use it. So I type in my bot’s name and then invite the ibmwatson_bot:</p><figure name=\"2cf4\" id=\"2cf4\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*jWrZSFxYi1NRKKxdAbsAlg.png\"></div></figure><figure name=\"710a\" id=\"710a\" class=\"graf--figure graf-after--figure\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*ouQqLvuZfoFb0awZpqvYyg.png\"></div></figure><p name=\"0a91\" id=\"0a91\" class=\"graf--p graf-after--figure\">Remember that Slack token? Let’s use it to get our bot online:</p><figure name=\"acea\" id=\"acea\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*PtPyFEbfTeTZNLFZdp0TCg.png\"></div></figure><p name=\"40cc\" id=\"40cc\" class=\"graf--p graf-after--figure\">You’ll notice in Slack when a bot is online. It changes from this:</p><figure name=\"a47a\" id=\"a47a\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*yVCTujKpEPJg9hbB63b9Jg.png\"></div></figure><p name=\"8d32\" id=\"8d32\" class=\"graf--p graf-after--figure\">To this:</p><figure name=\"40c9\" id=\"40c9\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*9RNuGEJr8j-z-W1IIuJDoA.png\"></div><figcaption class=\"imageCaption\">It’s alive!</figcaption></figure><p name=\"a1ad\" id=\"a1ad\" class=\"graf--p graf-after--figure\">So you should have the RTM API going now:</p><p name=\"2562\" id=\"2562\" class=\"graf--p graf-after--h4\">Now let’s actually make stuff happen. Check out this code that has the bot listen for “Hi Watson”</p><figure name=\"281b\" id=\"281b\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*FOD866UjGhhpRJqwtQM02A.png\"></div></figure><p name=\"6aba\" id=\"6aba\" class=\"graf--p graf-after--figure\">Let’s try it out:</p><figure name=\"6288\" id=\"6288\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*2n8KBepFuo_rkgqLKi44zg.png\"></div></figure><p name=\"47d4\" id=\"47d4\" class=\"graf--p graf-after--figure\">Sweeeeet. You should also see some information in your terminal relating to the users, channels, and conversations. Each one gets a unique identifier which you can use to call or access if you want.</p><p name=\"ea91\" id=\"ea91\" class=\"graf--p graf-after--p\">Now check out this code that relates to the Personality Insights call:</p><figure name=\"d773\" id=\"d773\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*gZjCPo9N45XDOW3A0jzyQA.png\"></div></figure><p name=\"ca7d\" id=\"ca7d\" class=\"graf--p graf-after--figure\">Now try it in the Slack channel:</p><figure name=\"1077\" id=\"1077\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*hBUhLhLNRhCQ-2Y6tl72BQ.png\"></div></figure><p name=\"a52e\" id=\"a52e\" class=\"graf--p graf-after--figure\">Dang! Our channel is not very agreeable, is it?! It’s like we’re a bunch of developers or something.</p><p name=\"b6ac\" id=\"b6ac\" class=\"graf--p graf-after--p\">You’ll see Personality Insights returns in your terminal, too:</p><figure name=\"037a\" id=\"037a\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*PPPqr0hWkFrMWMsk0jjXdw.png\"></div></figure><p name=\"d191\" id=\"d191\" class=\"graf--p graf-after--figure\">That’s it! Now we know the personality of the channel.</p><p name=\"46b5\" id=\"46b5\" class=\"graf--p graf-after--p\">If you don’t want to keep passing in the token each time you can deploy this back to Bluemix or another PaaS.</p><p name=\"214c\" id=\"214c\" class=\"graf--p graf-after--h4\">The <a href=\"http://howdy.ai/botkit\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Howdy.AI Botkit</a> has many more features and IBM Watson has a bunch more natural-language processing tools if you’re interested. You can also head over to my <a href=\"https://github.com/ashhath/WatsonPersonalityBot\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Github</a> to see the whole project.</p><figure name=\"4cbc\" id=\"4cbc\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*zxePVPh7c69NgBP4fO25Xw.png\"></div></figure><p name=\"4e7c\" id=\"4e7c\" class=\"graf--p graf-after--figure graf--last\">Overall great project to get my terminal window open again. It’s interesting to only use the Slack interface and command line for a project, so I hope this tutorial was helpful. I hope to work on more starter projects and begin coding more. Thanks again to the help of <a href=\"https://twitter.com/benbrown\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Ben</a> at Howdy and <a href=\"https://github.com/jsstylos\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Jeff Stylos</a> at IBM.</p></div></div></section>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a31"
  },
  "title": "Make a Self-Training, NLP-Driven Slack Bot",
  "url": "http://blog.templeton.host/self-training-nlp-enabled-slack-bot-tutorial/",
  "excerpt": "Slack has taken the world by storm, growing to be one of the hottest companies around seemingly overnight. Originally just a \"messaging app for teams\" (their words), Slack now touts a vibrant&hellip;",
  "date_saved": "Sat Jul 16 18:11:02 EDT 2016",
  "content": "<div><section class=\"post-content\">\n <p>Slack has taken the world by storm, growing to be one of the hottest companies around seemingly overnight. Originally just a \"messaging app for teams\" (their words), Slack now touts a vibrant ecosystem of extensions and integrations to make teams work better. </p>\n\n<p>Let's take a peek at what's going on with Slack integrations, and then I'll show you how to make a Slack Bot that understands flexible English with an approachable Natural Language Processing (NLP) system, all in node.js.</p>\n\n<p>(For the impatient: <a href=\"https://github.com/andrew-templeton/bottie\">code</a>)</p>\n\n<h3 id=\"incomingoutgoingrtmohmy\">Incoming, Outgoing, RTM, Oh My</h3>\n\n<p>Vendors and individual teams write integrations on Slack because the integrations take only a short time to write, whether they be webhook-based or leverage the more advanced Real Time Messaging (RTM) API. These integrations center around notifications, collaboration and commands - for example, a team might want a Slack integration that sends a message to a particular chat room when a customer sends their sales email address a message.</p>\n\n<p>More recently, Slack began touting the platform's support for bots, which use the RTM API to present themselves similar to normal, human users. Bots bring the power of software right into the chatrooms that business users are increasingly spending their time in. This readily-available presence within the chatrooms make bots a convenient way to automate many business functions, or simply aid teams to work more effectively.</p>\n\n<h3 id=\"howdyaiandbotkit3\">Howdy.ai and Botkit &lt;3</h3>\n\n<p>If you want to make a Slack bot, you need three things: </p>\n\n<ol>\n<li>Connectivity to Slack </li>\n<li>Input interpretation of user commands </li>\n<li>Integration logic to back bot actions </li>\n</ol>\n\n<p><a href=\"https://github.com/howdyai/botkit\">Botkit</a>, by <a href=\"https://howdy.ai\">Howdy.ai</a>, is an open-source toolkit which fully handles the Slack connectivity portion we need, and makes basic input interpretation a little easier. It provides an easy way to connect to Slack via the RTM API, supports multi-message conversations, storage adapters, and lets you define simple input interpretation handlers using regular expressions.</p>\n\n<p>The problem with using simple regular expressions for your bot is that regular expressions are VERY particular, and your users on your Slack channel are humans. If the whole purpose of writing a bot is to make work easier, then we should not need to train our users to work with specific bot commands - then we have turned our Slack bot into a command line prompt.</p>\n\n<p>We want to leverage the excellent connectivity tools Howdy.ai has given us with Botkit, with a more flexible system for input interpretation, which understands English. </p>\n\n<h3 id=\"nlpbotkitmagic\">NLP + Botkit = Magic</h3>\n\n<p>Natural Language Processing (NLP) allows us to build this flexible English interpretation we want. Put (very) simply, NLP aims to help computers understand human language. While NLP is a deep, complex, and still-developing field, we can use a small piece of NLP to teach our bot to understand which commands we want to use even when we use flexible English. </p>\n\n<p>We will use simple document classification, a portion of NLP, to make bots understand which command we are trying to invoke when we talk to them in plain English. A \"document\" here is a string of text, and \"classification\" means we will try to decide to what group said string of text belongs. When working with a bot, our bot will use NLP on our message documents, and classify which command we are trying to invoke. </p>\n\n<p>All we need to do is set up a system which plugs some example sentences for the bot to learn, assign each sentence a command (its class), put these labeled sentences into a classifier, and connect the classifier to Botkit.</p>\n\n<h3 id=\"showmethecode\">Show Me The Code!</h3>\n\n<p>Let's get into it. We're going to make our bot trainable on-the-fly, so we can teach it new sentence types without writing any code. If we want the sentences to invoke actions on other systems, we will have to write that logic later, but this portion will let us author new interpretation logic directly in Slack.</p>\n\n<p>This assumes you have node.js installed and have a Slack login for which you are an administrator, as you need to be able to authorize your bot to communicate with Slack.</p>\n\n<h6 id=\"getyourslackbottoken\">Get Your Slack Bot Token</h6>\n\n<p>You'll need to go to <a href=\"https://my.slack.com/apps/build/custom-integration\">Slack's Custom Integrations panel</a> and click on the Bots link:</p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/slack-custom-integrations-panel.png\" alt=\"Slack Custom Integrations Panel\"></p>\n\n<p>Then, name your bot: </p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/slack-bot-name.png\" alt=\"Name Your Bot\"></p>\n\n<p>You'll land on the new bot's integration page. You need to copy the <strong>API Token</strong> value here into your clipboard.</p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/slack-bot-token.png\" alt=\"Get Bot Token\"></p>\n\n<p>Save this value, as we need to give it to Bottie (or whatever you called yours) in a later step.</p>\n\n<h6 id=\"getthebottiebasecode\">Get the Bottie Base Code</h6>\n\n<p>I set up a <a href=\"https://github.com/andrew-templeton/bottie\">GitHub repo with the code for Bottie</a> so you can follow along. Let's clone it onto your machine:</p>\n\n<pre><code class=\"language-bash\">$ git clone https://github.com/andrew-templeton/bottie;\n</code></pre>\n\n<p>After the repository finishes cloning, you'll need to run <code>npm install</code> to install dependencies: <a href=\"https://github.com/NaturalNode/natural\"><code>natural</code></a> for our NLP classifiers and <a href=\"https://github.com/howdyai/botkit\"><code>botkit</code></a> for the connectivity layer.</p>\n\n<pre><code class=\"language-bash\">$ npm install;\n</code></pre>\n\n<p>Once the dependencies finish installing, we need to give the environment the proper Slack API Token that we copied earlier (&lt;COPIED_TOKEN&gt; here): </p>\n\n<pre><code>$ export SLACK_TOKEN='&lt;COPIED_TOKEN&gt;';\n</code></pre>\n\n<p>Now, we have Bottie's base downloaded and configured to connect to our Slack installation.</p>\n\n<p>You can start Bottie up by running: </p>\n\n<pre><code class=\"language-bash\">$ node index\n</code></pre>\n\n<p>That's it! Bottie should be up and running in Slack. You can message Bottie now by adding it to your Direct Messages, using <code>/invite @bottie</code> to invite Bottie to a channel, and sending messages with <code>@bottie</code> in them. If you used a different name for the bot when configuring it in the Slack Integrations panel, use that name when addressing the bot.</p>\n\n<h6 id=\"openbottiesbrain\">Open Bottie's Brain</h6>\n\n<p>Bottie uses classifiers and example sentences to understand what we are saying, so we should take a look at what Bottie understands already. Open your the <code>bottie</code> directory you cloned down with your favorite text editor and navigate to <code>./builtins.js</code>.</p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/bottie-builtins.png\" alt=\"Bottie Built In Commands\" title=\"\"></p>\n\n<p>Right now, Bottie only understands when someone asks Bottie to tell a joke, and when people ask Bottie to echo back what is said to Bottie. We will teach Bottie how to understand other commands soon.</p>\n\n<p>The way that these commands work is by adding the array of phrases on each key into a Logistic Regression Classifier (LRC) as a new document labeled by the key and then training the classifier when we have added all documents. The LRC is borrowed from the <code>natural</code> package I mentioned earlier and is an industry-standard document classifier we use in NLP. The math behind the LRC is fairly complex, but for our simple use cases, we can merrily use the LRC without worrying about the details too much.</p>\n\n<p>I have named this piece of the code as \"Brain\", which you can find in <a href=\"https://github.com/andrew-templeton/bottie/blob/44806d463206a1bbdf3e97b1e46f65e7501b710b/src/brain.js\"><code>./src/brain.js</code></a>. Open it up in your text editor and you should see something like this: </p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/bottie-brain.png\" alt=\"Bottie Brain\"></p>\n\n<p>In the actual file, you will see there's a bit more code to handle the execution of the code Bottie will delegate to when it understands commands, but these 30 lines or so are the magic that makes the system work and understand English. You'll want to give Bottie as many examples as possible, because LRCs work much, much better the more sentence structures and synonyms you feed into them.</p>\n\n<h5 id=\"bottiesears\">Bottie's Ears</h5>\n\n<p>The Brain file is interesting, but we should also take a look at Bottie's \"Ears\", which make it connect and listen (surprise) to a Slack installation, using <code>botkit</code>. Open <a href=\"https://github.com/andrew-templeton/bottie/blob/44806d463206a1bbdf3e97b1e46f65e7501b710b/src/ears.js\"><code>./src/ears.js</code></a> in your text editor, or click the link, and you'll see something like:</p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/bottie-ears.png\" alt=\"\"></p>\n\n<p>This is a very simple wrapper around <code>botkit</code>'s already fairly clean API.</p>\n\n<ul>\n<li>The <code>BotKit.slackbot</code> function call does <em>not</em> reference a token or a specific installation, so we could theoretically make Bottie listen to more than one slack installation, simply by making a second <code>new Ears(anotherToken).listen()</code> call.</li>\n<li>The <code>this.scopes</code> object tells Bottie if it should listen and try to interpret absolutely everything, or just listen and respond when actually addressed. I have configured Bottie to only respond when addressed here.</li>\n<li>The <code>.startRTM</code> call is the magic method that actually connects Bottie to a Slack installation, and the <code>Bot.hears</code> call is what we use to listen for different patterns written to Bottie.</li>\n</ul>\n\n<h5 id=\"trainingbottie\">Training Bottie</h5>\n\n<p>Now, not only can we say flexible sentences to Bottie, but we should also be able to train Bottie new language patterns without writing any code. This is enabled via a special command, <code>TRAINING TIME!!!</code>. When we want to teach Bottie a new skill in Slack, this is what we should do: </p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/bottie-training.png\" alt=\"Training Bottie\"></p>\n\n<p>When I'm finished training Bottie, I should put <strong>done</strong> on a line by itself, wait for Bottie to tell me it's done thinking, then try it out: </p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/bottie-training-done.png\" alt=\"Finished Training Bottie\"></p>\n\n<p>This is great! It means that non-technical users can suggest features and test out bot skill invocations without needing to know NLP or how to code.</p>\n\n<h5 id=\"howbottietrainsitself\">How Bottie Trains Itself</h5>\n\n<p>What's really going on here is that Bottie is using <code>Ears</code>/<code>botkit</code> to start a conversation and ask for phrase name plus a set of phrase examples, then using <code>Brain</code>/<code>natural</code> to train the Brain LRC on-the-fly. Bottie also serializes the new phrase examples and empty skill file onto disk so it remains on next load.</p>\n\n<p>The method for accomplishing this is fairly simple - we tell <code>Ears</code> to listen specifically for the magic phrase <code>TRAINING TIME!!!</code> <a href=\"https://github.com/andrew-templeton/bottie/blob/44806d463206a1bbdf3e97b1e46f65e7501b710b/index.js#L37-L40\">on these lines in <code>index.js</code></a>, and <a href=\"https://github.com/andrew-templeton/bottie/blob/44806d463206a1bbdf3e97b1e46f65e7501b710b/src/train.js\">invoke a <code>Training</code> module in <code>./src/training.js</code></a>. The <code>Training</code> module then uses <code>speech.startConversation</code> provided by <code>botkit</code> to begin a multi-step conversation. We listen for <code>done</code> by itself in Slack to signal the user is done sending sample inputs, then add all the phrases to the <code>Brain</code>, then tell <code>Brain</code> to <code>think</code> / train the internal LRC driving Bottie. There is some additional logic to persist the information to disk, which is standard JSON file manipulation.</p>\n\n<h5 id=\"puttingitalltogether\">Putting It All Together</h5>\n\n<p>Now that we have reviewed <code>Brain</code>, <code>Ears</code>, and <code>Train</code>, the final step of integrating these pieces is incredibly simple. Navigate to <a href=\"https://github.com/andrew-templeton/bottie/blob/44806d463206a1bbdf3e97b1e46f65e7501b710b/index.js#L29-L52\"><code>./index.js</code></a> lines 29 through 52 in your text editor or by clicking the link, and you should see the main logic body:</p>\n\n<p><img src=\"http://the.cdn.bytuple.com/blog-templeton-host/bottie-main.png\" alt=\"Bottie Main Logic\"></p>\n\n<p>On lines 31 and 32, we are simply running a <code>Teach</code> function, which is a wrapper around the <code>natural</code> library's <code>LogisticRegressionClassifier#addDocument</code> method. Once we have added all of our phrase sets, we tell the <code>Brain</code> to think, which is a wrapper on <code>LogisticRegressionClassifier#train</code>. </p>\n\n<p>We then make the <code>Ears</code> use <code>botkit</code> to <code>listen</code> on our Slack installation and <code>hear</code> two patterns. While <code>botkit</code> normally lets you listen to patterns, we only want to listen to one specific pattern, the special <code>TRAINING TIME!!!</code> command, then pass all other phrases to the second handler, in which we use the Bottie <code>Brain</code> to <code>interpret</code> messages and perhaps <code>invoke</code> skills associated with phrases. <code>interpret</code> runs both <code>LogisticRegressionClassifier#getClassifications</code> to pull raw phrase grouping probabilities, and <code>LogisticRegressionClassifier#classify</code> to tell us which is the most likely phrase group overall.</p>\n\n<h3 id=\"wrappingup\">Wrapping Up</h3>\n\n<p>We now know how to provision a Slack Bot and get a token for integration, connect to Slack via the RTM API using <a href=\"https://howdy.ai\">Howdy.ai</a>'s handy <code>botkit</code> library, and use basic NLP techniques in JavaScript with the open source <code>natural</code> toolkit. We also saw how to make a bot train new phrasing on the fly, as well as make our bot write new code stubs for future development.</p>\n\n<p>Interested in Slack bot development, AI, Machine Learning, or NLP? Have feedback for me on my code, writing, or topics? Tweet me <a href=\"https://twitter.com/ayetempleton\">@ayetempleton</a> - I'd love to hear from you!</p>\n </section>\n\n </div>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a33"
  },
  "title": "How to Build A Slackbot + Deploy an App to Heroku for Absolute Beginners",
  "url": "http://blog.npmjs.org/post/128237577345/how-to-build-a-slackbot-deploy-an-app-to-heroku",
  "excerpt": "Back in ye olde days of the internet, there was IRC (Internet Relay Chat), a chat network with channels and servers for every microcosm in the world. Folks would make these little bots or&hellip;",
  "date_saved": "Sat Jul 16 18:11:05 EDT 2016",
  "content": "<div><div class=\"cont group\"><p>Back in ye olde days of the internet, there was IRC (Internet Relay Chat), a chat network with channels and servers for every microcosm in the world. Folks would make these little bots or services&#x200A;&#x2014;&#x200A;they&#x2019;d greet you when you joined a channel, played trivia, Uno and other chat-based games with you. Unfortunately, if you wanted to make one yourself, you likely needed some knowledge of Perl, client-server architecture and a handful of Unix commands.</p><p>Today, most will opt for a more aesthetic alternative to IRC. Namely, Slack&#x200A;&#x2014;&#x200A;a chat-based team communication tool. The best part? You can create a Slackbot with substantially fewer roadblocks.</p><p>I&#x2019;ll try not to make assumptions on the technologies you may or may not have on your machine here. So let&#x2019;s go ahead and start from scratch. If you already have any or all of following downloaded, you&#x2019;re ahead of the game!</p><h2><b>\n\nSetup</b></h2><p>1. Install Node.js and npm&#xA0;</p><blockquote><p><b>Mac&#xA0;</b></p><p>Go to nodejs.org, Click &#x2018;install&#x2019;, and run through the install process.&#xA0;</p><p><b>Ubuntu</b>&#xA0;</p><p>You should be able to use the following:\n</p><pre>curl -sL <a href=\"https://deb.nodesource.com/setup_0.10\">https://deb.nodesource.com/setup_0.10</a> | sudo -E bash -<br>sudo apt-get install -y nodejscurl -sL <a href=\"https://deb.nodesource.com/setup_0.10\">https://deb.nodesource.com/setup_0.10</a> | sudo -E bash &#x2014; sudo apt-get install -y nodejs</pre><p>More installation help at <a href=\"https://medium.com/p/7347f99673ed/edit\">https://github.com/nodesource/distributions#deb</a></p><p><b>Windows</b></p><p>Go ahead the download <a href=\"http://nodejs.org/download/\">the Windows binary</a></p></blockquote><p>2. Create a Github account (<a href=\"https://github.com/\">https://github.com/</a>) and download git (<a href=\"http://git-scm.com/download\">http://git-scm.com/download</a>)</p><p>3. Clone this repository <a href=\"https://github.com/ceejbot/LOUDBOT-SLACK\">https://github.com/ceejbot/LOUDBOT-SLACK</a> by using the following command in your terminal:</p><pre>git clone git@github.com:ceejbot/LOUDBOT-SLACK.git</pre><p>4. Create an account and download Heroku on your machine<a href=\"https://toolbelt.heroku.com/\">https://toolbelt.heroku.com/</a></p><p>Pheew. Now that we have all that installed, on with the tutorial!</p><h2><b>Add Slack Tokens to Our App</b></h2><p>1. Go into your Slack group, click on the caret and then &#x201C;Configure Integrations&#x201D; in the dropdown<br></p><figure class=\"tmblr-full\"><img src=\"http://40.media.tumblr.com/4da4b3054d0cd91b7bce41649b9964df/tumblr_inline_nu31m5ndgi1tbywuh_500.png\" alt=\"image\" width=\"500\"></figure><p>2.&#xA0;Under &#x2018;All Integrations&#x2019; &#x2192; &#x2018;DIY Integrations &amp; Customizations&#x2019;, click on &#x2018;Outgoing WebHooks&#x2019;</p><figure class=\"tmblr-full\"><img src=\"http://41.media.tumblr.com/994db7b445cf3500d01148340662631a/tumblr_inline_nu31n35dqx1tbywuh_500.png\" alt=\"image\" width=\"500\"></figure><p>3.&#xA0;The next screen should look like the following. Go ahead and click on &#x2018;Add Outgoing WebHooks Integration&#x2019;</p><figure class=\"tmblr-full\"><img src=\"http://36.media.tumblr.com/3f37d035bcfcaa49eda867cc9a62ec24/tumblr_inline_nu31nw80JB1tbywuh_500.png\" alt=\"image\" width=\"500\"></figure><p>4. Set the channel to the specific channel you would like your slackbot to be active on, and copy the corresponding token (Rest assured, we&#x2019;ll be able to add our slackbot on multiple channels. We&#x2019;ll get to that in a bit)<br></p><figure class=\"tmblr-full\"><img src=\"http://40.media.tumblr.com/f578fa4c5d540daff390a9310b77fe4b/tumblr_inline_nu31oy3Spt1tbywuh_500.png\" alt=\"image\" width=\"500\"></figure><p>5. Open a terminal and navigate to the directory you cloned and use the following command to create your own file to store environment variables. You should note that your .gitignore includes this .env file.</p><pre>cat .env.example &gt; .env</pre><p>6. Next, using a text editor of your choice, open the loudbot directory</p><p>7. Open .env and replace the contents of TOKENS with the token you copied from slack. Now I&#x2019;d promised you could add loudbot to multiple channels. To do this, repeat the above steps to add outgoing webhook integrations for as many channels are you would like. Just remember to copy the corresponding tokens into the TOKENS list in .env.</p><p>8. To complete the SLACK_TOKEN field, we&#x2019;ll have to revisit the Slack &#x2018;Configure Integrations&#x2019; page. Under &#x2018;DIY Integrations &amp; Customizations&#x2019;, there should be a service called &#x2018;Bots&#x2019;</p><figure class=\"tmblr-full\"><img src=\"http://41.media.tumblr.com/cde204d9b08fb54d80ee9d67902e9a91/tumblr_inline_nu31q16oR51tbywuh_500.png\" alt=\"image\" width=\"500\"></figure><p>9. Create a new Bot, name it &#x2018;LOUDBOT&#x2019; and copy the &#x2018;API TOKEN&#x2019; under Integration Settings into the SLACK_TOKEN field in your .env file.</p><h2><b>Deploy Our Slackbot to Heroku</b></h2><p>1.Next we need put loudbot on a server so it can constantly be listening and responding to our Slack messages.</p><p>2. Create a file entitled &#x2018;Procfile&#x2019; without a file extension. This is the file that tells Heroku what commands to use to run your application. The contents of the file are a single line that should be the following:</p><figure class=\"tmblr-full\"><img src=\"http://40.media.tumblr.com/690db322baf2c1857b4d481a234d255c/tumblr_inline_nu31rsdoVJ1tbywuh_500.png\" alt=\"image\" width=\"500\"></figure><p>3. Finally, in your terminal, within your loudbot repository, run the following Heroku commands.<br></p><pre>heroku create</pre><p>This will create a new heroku app (note you can only have a max of 5 heroku apps on the free plan). Git remotes are references to remote repositories and this command will also create a git remote you can reference as &#x2018;heroku&#x2019; on the command line.</p><pre>git add</pre><pre>git commit -m \"my commit message\"</pre><p>These are git commands for that&#x2019;ll help track your changes to the app. They will commit your changes to your local directory, in preparation for deploying your app to Heroku.</p><pre>git push heroku master</pre><p>This will actually push your app to Heroku.</p><p>And there you have it&#x200A;&#x2014;&#x200A;your app is live. LOUDBOT learns from your shouting and you can talk with LOUDBOT in any channel it is active in using all-caps. Enjoy!</p><figure class=\"tmblr-full\"><img src=\"http://36.media.tumblr.com/d35400ddda99a5d331801984af9cf132/tumblr_inline_nu31t0A1by1tbywuh_500.png\" alt=\"image\" width=\"500\"></figure></div>\n \n </div>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a34"
  },
  "title": "Getting Started with Slack Bots",
  "url": "http://www.sitepoint.com/getting-started-slack-bots/",
  "excerpt": "Slack is a popular tool for encouraging better communication among team members. It comes with a slew of helpful features and services including third-party integrations and webhook support. Slack&hellip;",
  "date_saved": "Sat Jul 16 18:11:06 EDT 2016",
  "content": "<div><section class=\"article_body\">\n\n <p><a href=\"https://slack.com/\">Slack</a> is a popular tool for encouraging better communication among team members. It comes with a slew of helpful features and services including third-party integrations and webhook support. Slack webhooks can be fun and useful, and they&#x2019;re easy to set up. In this tutorial we&#x2019;ll set up a simple server using <a href=\"http://nodejs.org/\">Node.js</a> and <a href=\"https://www.heroku.com/\">Heroku</a> that will respond to your team&#x2019;s messages from Slack as a &#x201C;bot.&#x201D; Familiarity with JavaScript and Git will be helpful. If you haven&#x2019;t used Git before, take a look at <a href=\"http://www.sitepoint.com/git-for-beginners/\">Git for Beginners</a> to get started. Access to a Slack account is also assumed, but don&#x2019;t worry &#x2013; they&#x2019;re free!</p>\n<h2 id=\"creating-a-new-slack-integration\">Creating a New Slack Integration</h2>\n<p>From the Slack web interface, open the menu in the top left corner next to your team&#x2019;s name and select <a href=\"http://slack.com/services/new\">Configure Integrations</a>. Here, you can see a dashboard with all the integrations available to you. Scroll to the very bottom under <strong>DIY Integrations &amp; Customizations</strong>, and add an <strong>Outgoing WebHook</strong>. Read the short description and then click <strong>Add Outgoing WebHooks Integration</strong>. </p>\n<p><img src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/12/1418788421slack_intro-diy_integrations.png\" alt=\"DIY Integrations &amp; Customizations\" width=\"844\" class=\"alignnone size-large wp-image-96734\"></p>\n<p>You will see the Outgoing WebHook configuration and an example of what the request and response payloads should look like. Our first bot will simply greet the user when called. To do this, we will allow the hook to listen for the Trigger Word &#x201C;hello&#x201D; on any channel. We don&#x2019;t know the URL it will be posting to yet, so we will come back to this page later.</p>\n<h2 id=\"creating-a-web-server\">Creating a Web Server</h2>\n<p>We&#x2019;ll be using <a href=\"http://expressjs.com/\">Express 4</a> on Node.js to build a simple web server.</p>\n<p>Create a new directory for your app, and run <code>npm init</code> to generate your <code>package.json</code> file. In your <code>package.json</code> dependencies, include <code>\"express\": \"^4.x.x\"</code> and <code>\"body-parser\": \"^1.x.x\"</code>. The <code>body-parser</code> package will be used to parse the payload sent from Slack. Create the server file named <code>app.js</code>. Here, we will <code>require</code> the necessary modules, add the body parser middleware, error handler, and a test route. Then, we tell the server to start listening.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nvar express = require('express');\nvar bodyParser = require('body-parser');\n\nvar app = express();\nvar port = process.env.PORT || 3000;\n\n// body parser middleware\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// test route\napp.get('/', function (req, res) { res.status(200).send('Hello world!') });\n\n// error handler\napp.use(function (err, req, res, next) {\n console.error(err.stack);\n res.status(400).send(err.message);\n});\n\napp.listen(port, function () {\n console.log('Slack bot listening on port ' + port);\n});\n</pre>\n<p>Run the server with <code>node app</code> and verify that visiting <code>http://localhost:3000</code> responds with &#x201C;Hello world!&#x201D;.</p>\n<h2 id=\"writing-the-bot-logic\">Writing the Bot Logic</h2>\n<p>Create a file named <code>hellobot.js</code></p>\n<p>This module will be where our bot logic lives. It will include one exported function that returns a message to Slack with status code <code>200</code>. We&#x2019;ll start by parsing the data that Slack sends to our server, and then we&#x2019;ll respond with a properly formatted payload of our own. To do this, let&#x2019;s revisit our Outgoing WebHook under <a href=\"https://slack.com/services\">Configured Integrations</a>. The <strong>Outgoing Data</strong> example shows us all the info Slack sends when an Outoing WebHook is triggered.</p>\n<p><img src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/12/1418788418slack_intro-outgoing_data.png\" alt=\"Outgoing WebHook Data Example\" width=\"836\" class=\"alignnone size-large wp-image-96732\"></p>\n<p>You can see that some of the data can be useful for authentication or routing, but for now we&#x2019;re just going to focus on the <code>user_name</code> property. Using this value, we can send a personalized greeting back to the user.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nmodule.exports = function (req, res, next) {\n var userName = req.body.user_name;\n var botPayload = {\n text : 'Hello, ' + userName + '!'\n };\n\n // avoid infinite loop\n if (userName !== 'slackbot') {\n return res.status(200).json(botPayload);\n } else {\n return res.status(200).end();\n }\n}\n</pre>\n<p>Here we create our <code>botPayload</code> object. The only necessary property is <code>botPayload.text</code>, which defines what our bot will display when we respond. Add the <code>text</code> property with a greeting to the user, and respond with JSON and a status code of <code>200</code>. Notice that our bot&#x2019;s response is our Outgoing WebHook&#x2019;s trigger word! To avoid an infinite loop, we can check the <code>user_name</code> of the body. All hooks post as &#x201C;slackbot&#x201D;, even if the name appears differently in chat. We can use this fact to keep our hook from responding to itself.</p>\n<p>Back in <code>app.js</code>, require the bot module at the top.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nvar hellobot = require('./hellobot');\n</pre>\n<p>Then, add a route that listens for a <code>POST</code> to <code>/hello</code>.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\napp.post('/hello', hellobot);\n</pre>\n<p>Let&#x2019;s do a quick test. Run the app again using <code>node app</code>, and in another terminal window use <code>curl</code> to make sure the app responds as we expect it to. (Note: since our bot only looks for one value here, there&#x2019;s no need to include the entire Slack payload in our test).</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ncurl -X POST --data \"user_name=foobar\" http://localhost:3000/hello\n</pre>\n<p>If our app works, we should see a response that looks like this:</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n{\"text\":\"Hello, foobar!\"}\n</pre>\n<p>Now, it&#x2019;s time to put our bot online.</p>\n<h2 id=\"deploying-the-app-on-heroku\">Deploying the App on Heroku</h2>\n<p><a href=\"https://www.heroku.com/\">Heroku</a> is a convenient service that helps you get a web server online for free in very little time. Deployments are made by pushing your code to their git server where it is automatically deployed and run. Create an account on Heroku or log in if you already have an account.</p>\n<p>Once you&#x2019;ve logged in, you&#x2019;ll see your Heroku dashboard. Click the <code>+</code> in the top right to create a new app. Follow the instructions provided to log in to Heroku on your computer. Deployment is easy, but there is a lot to know the first time you deploy an app. Make sure you follow <a href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs#introduction\">this guide</a> when you&#x2019;re getting your app set up. We&#x2019;ll do some double checks along the way, but there&#x2019;s a lot of good info in there that&#x2019;s outside the scope of this article.</p>\n<p>Before we can deploy our bot, we&#x2019;ll need to tell Heroku how to run the app. This is done by creating a <a href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-a-procfile\">Procfile</a>. Your Procfile only needs a single line: </p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nweb: node app\n</pre>\n<p>Once you you&#x2019;ve done this, you can commit your changes and push to <code>heroku</code>. Heroku automatically installs the node modules, and you&#x2019;ll see the results of your deployment. If everything went smoothly, you&#x2019;ll see a link to your app at the bottom. Copy that URL, and then visit your Outgoing WebHook&#x2019;s configuration page once again. Add the URL you copied to the <strong>URL(s)</strong> input field with the <code>/hello</code> route appended and modify the name and icon of the hook if you&#x2019;d like.</p>\n<p><img src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/12/1418788416slack_intro-outgoing_urls.png\" alt=\"Outgoing WebHook URL(s)\" width=\"816\" class=\"alignnone size-large wp-image-96731\"></p>\n<p>There&#x2019;s one more step to get the bot online: we need to give it a <a href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs#scale-the-app\">Dyno</a>. In the terminal, enter:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nheroku ps:scale web=1\n</pre>\n<p>This tells Heroku to give your app one web worker. Careful; your app only gets one free dyno per month!</p>\n<p>Your bot should be online now, so go back into Slack and test it out!</p>\n<p><img src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/12/1418788420slack_intro-hellobot.png\" alt=\"Hellobot Response\" width=\"214\" class=\"alignnone size-large wp-image-96733\"></p>\n<p>If you didn&#x2019;t get a response, go back and check your code. You can use the terminal command <code>heroku logs</code> to see details about the requests as well as any <code>console.log()</code> statements you&#x2019;ve added.</p>\n<p>Not too difficult, was it? We successfully set up a webhook in Slack, deployed our app to Heroku, and got the two to talk to each other! A bit more work than a simple &#x201C;hello world&#x201D; program, but much more rewarding. Now that we have our server running, we can easily add more hooks and responses. Hellobot is pretty friendly, but it&#x2019;s not that useful. In the next section we&#x2019;ll use Slack&#x2019;s other webhook types to create a dice roll chat command.</p>\n<h2 id=\"dicebot-using-slack-commands-and-incoming-webhooks\">DiceBot &#x2013; Using Slack Commands and Incoming WebHooks</h2>\n<p>In the last section, we used an Outgoing WebHook that listened to chat for a trigger word, sent a message to our server, and displayed the response. In this section, we&#x2019;ll use two other tools for creating custom integrations: <strong>Slash Commands</strong> and <strong>Incoming WebHooks</strong>. Visit the <a href=\"http://slack.com/services/new\">Configure Integrations</a> page and take a look at the other options under <strong>DIY Integrations &amp; Customizations</strong>. Let&#x2019;s start by adding the <strong>Slash Commands</strong> integration. Read the short description, set the command to &#x201C;/roll&#x201D;, and add the integration. The next page shows the configuration. You can see that the Outgoing Data looks similar to the Outgoing WebHook we configured earlier. We&#x2019;ll use the app we created in the last section for this section, so we can use the same URL, but this time we&#x2019;ll <code>POST</code> to the route <code>/roll</code>.</p>\n<p>Notice that the Slash Command integration can respond to the user, but only in private. What use is a dice roll if only you can see the dice? Slack suggests using an Incoming WebHook in tandem with Slash Commands to send messages to chat. Go back to the <a href=\"http://slack.com/services/new\">Configure Integrations</a> page and add an <strong>Incoming WebHook</strong>. Read the description, select a channel, and add the hook. Don&#x2019;t worry about what channel you picked; we can specify the channel in our bot&#x2019;s response. Because we can choose the channel in our app, it means that we can also use this integration for any other bots we create. The Incoming WebHook doesn&#x2019;t have much in the way of configuration, but it does have a lot of important information for constructing our bot&#x2019;s response payloads. The most important part is the <strong>Webhook URL</strong>. We&#x2019;ll be <code>POST</code>ing to this from our app in order to send messages to Slack.</p>\n\n<p>Since we&#x2019;ve pointed our Slash Command at the route <code>/roll</code>, we can add that route to our server alongside of hellobot. We&#x2019;ll be using a secret URL for our incoming hook, so it&#x2019;s a good idea to keep it hidden in case you want to make your code public. A good way to do this is to use Heroku&#x2019;s <a href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs#define-config-vars\">config vars</a>.</p>\n<p>Let&#x2019;s also add <code>request</code> to our package to use with the incoming hook:</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nnpm install --save request\n</pre>\n<p>Now we&#x2019;ll add <code>dicebot.js</code>. Dicebot will export one function, but we&#x2019;ll need two additional functions: one to <code>POST</code> to the Incoming WebHook, and one to roll the dice.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nvar request = require('request');\n\nmodule.exports = function (req, res, next) {\n};\n\nfunction roll () {\n}\n\nfunction send () {\n}\n</pre>\n<p>As many tabletop gamers know, there are many more types of dice than just six-sided dice. Other dice have four sides, eight sides, ten sides, twenty sides, and more! A special notation is used when rolling these dice: <code>&lt;number of dice&gt;d&lt;sides of dice&gt;</code>. So, rolling two six-sided dice is notated as &#x201C;2d6&#x2033;. We can let users roll multiple dice using this notation, but we&#x2019;ll have to check for correct input from the user.</p>\n<p>Let&#x2019;s start by initializing some variables and parsing the input. We&#x2019;ll set some default values in case the user wants to omit input.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nmodule.exports = function (req, res, next) {\n // default roll is 2d6\n var matches;\n var times = 2;\n var die = 6;\n var rolls = [];\n var total = 0;\n var botPayload = {};\n \n if (req.body.text) {\n // parse roll type if specified\n matches = req.body.text.match(/^(\\d{1,2})d(\\d{1,2})$/);\n\n if (matches &amp;&amp; matches[1] &amp;&amp; matches[2]) {\n times = matches[1];\n die = matches[2];\n } else {\n // send error message back to user if input is bad\n return res.status(200).send('&lt;number&gt;d&lt;sides&gt;');\n }\n } \n}\n</pre>\n<p>The regular expression above is pretty reliable for parsing dice rolls and limits the values to two-digit numbers only so the user can&#x2019;t go crazy. If the user messed up their syntax, we send back a hint.</p>\n<p>Rolling the dice with the user input is easy enough. See <a href=\"http://stackoverflow.com/a/1527820\">this thread</a> for an explanation of how a random roll works. For truly random rolls you could contact the <a href=\"https://api.random.org/json-rpc/1/\">random.org API</a>. Let&#x2019;s write the roll function.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nfunction roll (min, max) {\n return Math.floor(Math.random() articles bin CAs devops Documents dotfiles gethtml go jason js netdata playground start-thesrc swift thesrc ucii (max - min + 1) + min);\n}\n</pre>\n<p>Then, in our main function we&#x2019;ll make some rolls and build a message to respond with. Let&#x2019;s include the name of the roller so other users can see who used the <code>/roll</code> command.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n// roll dice and sum\nfor (var i = 0; i &lt; times; i++) {\n var currentRoll = roll(1, die);\n rolls.push(currentRoll);\n total += currentRoll;\n}\n\n// write response message and add to payload\nbotPayload.text = req.body.user_name + ' rolled ' + times + 'd' + die + ':\\n' +\n rolls.join(' + ') + ' = *' + total + '*';\n</pre>\n<p>We added the message to the <code>botPayload.text</code> property with some Slack formatting around <code>total</code> to make it bold. We can also configure the name, icon, and channel using the response payload. We&#x2019;ll set the channel based on the channel the user issues the roll command from. Slack suggests using the name of the channel in the payload, but that means we&#x2019;d have to prepend it with &#x201C;#&#x201D;. Instead, we can use the channel ID, which will allow us to post in public channels as well as private groups. For the icon, a convenient die emoji exists, though you could provide a better image using <code>icon_url</code>.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nbotPayload.username = 'dicebot';\nbotPayload.channel = req.body.channel_id;\nbotPayload.icon_emoji = ':game_die:';\n</pre>\n<p>The payload looks good. Let&#x2019;s write the <code>send</code> function. I&#x2019;ve chosen to store only the path tokens in Heroku&#x2019;s config vars. Make sure to send the body as a string of JSON.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nfunction send (payload, callback) {\n var path = process.env.INCOMING_WEBHOOK_PATH;\n var uri = 'https://hooks.slack.com/services' + path;\n\n request({\n uri: uri,\n method: 'POST',\n body: JSON.stringify(payload)\n }, function (error, response, body) {\n if (error) {\n return callback(error);\n }\n\n callback(null, response.statusCode, body);\n });\n}\n</pre>\n<p>In our main function, we&#x2019;ll initiate the send request. If it works, we can respond to the Slash Command with an empty <code>200</code>. If not, we can use the values from our <code>send()</code> callback to build an error. This will trigger the error handler in <code>app.js</code> and send back <code>400</code>, which will notify the user of the error.</p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n// send dice roll\nsend(botPayload, function (error, status, body) {\n if (error) {\n return next(error);\n } else if (status !== 200) {\n // inform user that our Incoming WebHook failed\n return next(new Error('Incoming WebHook: ' + status + ' ' + body));\n } else {\n return res.status(200).end();\n }\n});\n</pre>\n<p>Let&#x2019;s run our server and <code>curl</code> it again. This time, we&#x2019;ll need to include the <code>channel_id</code>. You can use the <a href=\"https://api.slack.com/methods/channels.list/test\">Slack API tester</a> to find the correct <code>channel_id</code>. Since the Incoming WebHook has already been set up, it should hear our server call it. We&#x2019;ll also need to include the Incoming WebHook path in our environment since the app isn&#x2019;t on Heroku yet.</p>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\nINCOMING_WEBHOOK_PATH=/your/path/tokens node app\n</pre>\n<pre class=\"brush: plain; title: ; notranslate\" title=\"\">\ncurl -X POST --data \"user_name=foobar&amp;channel_id=C0123ABCD&amp;text=4d6\" http://localhost:3000/roll`\n</pre>\n<p><img src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/12/1418788423slack_intro-dicebot.png\" alt=\"Dicebot Response\" width=\"211\" class=\"alignnone size-large wp-image-96735\"></p>\n<p>Looks good! Let&#x2019;s deploy it.</p>\n<h3 id=\"redeploying-to-heroku\">Redeploying to Heroku</h3>\n<p>Since we used Heroku&#x2019;s config vars to store our webhook&#x2019;s token, don&#x2019;t forget to set it in the app&#x2019;s <strong>Settings</strong> menu. </p>\n<p><img src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/12/1418788414slack_intro-heroku_configvars.png\" alt=\"Heroku Config Vars\" width=\"514\" class=\"alignnone size-full wp-image-96730\"></p>\n<p>Then use git to add the new files, commit your changes, and push to your <code>heroku</code> remote. Heroku will install node modules and start the server. Before we test it, let&#x2019;s start watching the logs in real time:<br>\n<code>heroku logs -t</code></p>\n<p>With our hooks all set up, our roll command should be ready to go. Try out a few rolls! If something didn&#x2019;t work, you can use the Heroku logs to debug. To see the completed app in its entirety, check out this <a href=\"https://github.com/jsprodotcom/getting-started-with-slack-bots\">GitHub repo</a>.</p>\n<h3 id=\"continuing-development\">Continuing Development</h3>\n<p>These two bots demonstrate all the tools you need to start writing your own chat bots and integrations. You can integrate many services into bots, or you can try to make a convincing conversation partner. APIs and node modules exist for you to achieve both of these goals.</p>\n<p>Some other ideas for bots:</p>\n<ul>\n<li>a bot that uses the GitHub API to show you open pull requests</li>\n<li>a bot that uses the Yelp API to help your team decide on lunch</li>\n<li>a bot that does Google searches for you</li>\n<li>a bot that talks to you only with buzzwords and jargon</li>\n</ul>\n<p>If you come up with good ideas, share your code! Bots are fun to make, and they&#x2019;ve never been easier to create.</p>\n\n </section>\n\n </div>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a36"
  },
  "title": "CSS Animation Tools, Frameworks & Tutorials",
  "url": "http://speckyboy.com/2015/09/09/css-animation/",
  "excerpt": "We&#x2019;re not going to be discussing the benefits of using CSS animations, nor are we going to talk about whether or not JS animation is faster that CSS animation in this post. What we are going&hellip;",
  "date_saved": "Sat Jul 16 18:11:09 EDT 2016",
  "content": "<div><section class=\"post_content clearfix entry-content\">\n<p>We&#x2019;re not going to be discussing the <a href=\"http://www.adobepress.com/articles/article.asp?p=2266739\" target=\"_blank\">benefits of using CSS animations</a>, nor are we going to talk about whether or not <a href=\"http://davidwalsh.name/css-js-animation\" target=\"_blank\">JS animation is faster that CSS animation</a> in this post.</p>\n<p>What we are going to do is share a collection of tools, frameworks and tutorials with you that will help ease your CSS animation learning woes and help save you some time along the way.</p>\n<h2>CSS Animation Tools &amp; Frameworks</h2>\n<h3>Animate.css</h3>\n<p><a target=\"_blank\" href=\"http://daneden.me/animate/\">Animate.css</a> is a collection of cross-browser CSS animations that you can use in your sliders, home pages, and other web projects.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_01.jpg\" alt=\"Animate.css cross-browser CSS animation\"></p>\n<h3>Stylie</h3>\n<p><a target=\"_blank\" href=\"http://jeremyckahn.github.io/stylie/\">Stylie</a> is a web-based CSS3 animation tool that you can use to configure and generate your own set of animations.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_02.jpg\" alt=\"Stylie web-based CSS3 animation tool\"></p>\n<h3>animo.js</h3>\n<p><a target=\"_blank\" href=\"http://labs.bigroomstudios.com/libraries/animo-js\">animo.js</a> is a powerful tool for managing CSS animations. You can easily stack animations to fire one after another, specify callbacks for the completion of an animation, or simply fire animations on any event or at any moment you please.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_03.jpg\" alt=\"Anima is a powerful tool for managing CSS animations\"></p>\n<h3>Anima</h3>\n<p>The lightweight (only 5k when gzipped) <a target=\"_blank\" href=\"http://lvivski.com/anima/\">Anima</a> lets you animate multiple objects at the same time, and each item can have it&#x2019;s mass and viscosity to emulate real-life objects. It uses CSS transforms and 3d-transforms together with Javascript to create the animation.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_04.jpg\" alt=\"Anima CSS CSS3 animate multiple objects\"></p>\n<h3>Rocket</h3>\n<p><a target=\"_blank\" href=\"http://minimamente.com/example/rocket/\">Rocket</a> is a simple tool for creating web animations.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2015/06/wk_newss_04.png\" alt=\"Rocket\"></p>\n<h3>CSS Shake</h3>\n<p><a target=\"_blank\" href=\"http://elrumordelaluz.github.io/csshake/\">CSS Shake</a> is a collection of CSS classes that will vibrates &amp; shake the 'DOM'.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2014/05/css_tools_resources_01.jpg\" alt=\"CSS Shake A collection of CSS classes that will vibrates &amp; shake the 'DOM'\"></p>\n<h3>Magic Animations</h3>\n<p><a target=\"_blank\" href=\"http://www.minimamente.com/example/magic_animations/\">Magic Animations</a> is a small library of CSS3 special effect animations.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2014/05/css_tools_resources_02.jpg\" alt=\"Magic Animations A small library of CSS3 special effect animations CSS Libraries\"></p>\n<h3>Hover.css</h3>\n<p><a target=\"_blank\" href=\"http://ianlunn.github.io/Hover/\">Hover.css</a> is a selection of CSS3 animated hover effects for buttons.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2014/05/css_tools_resources_03.jpg\" alt=\"Hover.css A selection of CSS3 animated hover effects for buttons\"></p>\n<h3>Saffron</h3>\n<p><a target=\"_blank\" href=\"http://colindresj.github.io/saffron/\">Saffron</a> is a Sass mixin library of simple CSS3 animations and transitions.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2014/05/css_tools_resources_04.jpg\" alt=\"Saffron A Sass mixin library of simple CSS3 animations and transitions CSS Libraries\"></p>\n<h3>CSSynth</h3>\n<p><a target=\"_blank\" href=\"http://bennettfeely.com/cssynth/\">CSSynth</a> is a small web-based app for running animations in order.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2014/05/css_tools_resources_36.jpg\" alt=\"CSSynth A small app for running animations in order\"></p>\n<h3>Ceaser</h3>\n<p><a target=\"_blank\" href=\"http://matthewlein.com/ceaser/\">Ceaser</a> is a simple CSS easing animation tool that you can easily employ in your projects.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_05.jpg\" alt=\"Ceaser is a simple CSS easing animation tool\"></p>\n<h3>Tridiv</h3>\n<p><a target=\"_blank\" href=\"http://tridiv.com/\">Tridiv</a> is a web-based editor that lets you create 3D shapes in CSS. It is cross-browser compatible, and you can also browse several online examples before you actually start using the editor.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_06.jpg\" alt=\"Tridiv is a web-based editor that lets you create 3D shapes in CSS\"></p>\n<h3>Morf.js</h3>\n<p><a target=\"_blank\" href=\"http://www.joelambert.co.uk/morf/\">Morf.js</a> is a JavaScript work-around that lets you produce hardware-accelerated CSS3 transitions with custom effects.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_08.jpg\" alt=\"Morf.js is a JavaScript work-around that lets you produce hardware-accelerated CSS3 transitions\"></p>\n<h3>CSS3 Keyframes Animation Generator</h3>\n<p>The <a target=\"_blank\" href=\"http://cssanimate.com/\">CSS3 Keyframes Animation Generator</a>, as the name suggests, is an online tool that lets you create CSS3 keyframe animations.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_09.jpg\" alt=\"Keyframes Generator is an online tool that lets you create CSS3 keyframe animations\"></p>\n<h3>Effeckt.css</h3>\n<p>The <a target=\"_blank\" href=\"https://h5bp.github.io/Effeckt.css/\">Effeckt.css</a> library offers a multitude of UI-less animations and transitions that you can use in your web projects.</p>\n<p><iframe width=\"640\" height=\"480\" src=\"http://www.youtube.com/embed/Qc40YDFA4Bg\"></iframe></p>\n<h3>CSS3 Animation Cheat Sheet</h3>\n<p>The <a target=\"_blank\" href=\"http://www.justinaguilar.com/animations/index.html\">CSS3 Animation Cheat Sheet</a> is a set of pre-made CSS3 animations that you can use in your web projects by adding the stylesheet to your site and applying the pre-made CSS3 classes to the necessary elements.</p>\n<p><img src=\"http://speckycdn.sdm.netdna-cdn.com/wp-content/uploads/2013/09/css_animation_10.jpg\" alt=\"The CSS3 Animation Cheat Sheet is a set of pre-made CSS3 animations that you can use in your web projects\"></p>\n<h2>CSS Animation Tutorials</h2>\n<p><a target=\"_blank\" href=\"http://webdesign.tutsplus.com/tutorials/a-beginners-introduction-to-css-animation--cms-21068\">A Beginner&#x2019;s Introduction to CSS Animation</a><br>After covering the basics, this tutorial will show you how to quickly create a quick example that will animate a square element into a circle.</p>\n<p><a target=\"_blank\" href=\"http://css3.bradshawenterprises.com/\">CSS Transitions, Transforms and Animation Tutorial</a><br>This website teaches you how to make use of CSS3 transitions, transforms and animations in your web projects. The tutorial is fairly simple and does not require an advanced level of working knowledge of CSS3.</p>\n<p><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations\">Using CSS Animations</a><br>This tutorial serves as a primer to CSS animations. If you are looking for a place to start with CSS animations, this tutorial can be of great use for you.</p>\n<p><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions\">Using CSS Transitions</a><br>Just like the above one, this tutorial too comes from the Mozilla Developer Network, even though this one teaches you how to work with CSS transitions.</p>\n<p><a target=\"_blank\" href=\"http://develop-a-website.com/simple-css3-animation-tutorials\">4 Simple CSS3 Animation Tutorials</a><br>This resource is a collection of four CSS3 animation tutorials combined into one. You can learn how to use and work with functions such as scale(), translate(), rotate() and skew().</p>\n<p><a target=\"_blank\" href=\"http://www.netmagazine.com/tutorials/animated-css-effects-fallbacks\">Animated CSS Effects with Fallbacks</a><br>This tutorial explains how to work with animated CSS effects. It was one of the most popular and most read articles on the erstwhile .net Magazine, and now you can access it on Creative Bloq.</p>\n<p><a target=\"_blank\" href=\"http://tympanus.net/codrops/2013/05/22/examples-of-pseudo-elements-animations-and-transitions/\">Examples of Pseudo-Elements Animations and Transitions</a><br>This tutorial unravels the potential of CSS animations and transitions when working with pseudo-elements :before and :after.</p>\n<p><a target=\"_blank\" href=\"http://tympanus.net/codrops/2012/05/21/animated-3d-bar-chart-with-css3/\">Animated 3D Bar Chart with CSS3</a><br>This rather advanced tutorial explains how to create a 3D bar chart using CSS3 animations.</p>\n\n</section>\t\t\t\t\n</div>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a38"
  },
  "title": "Systematic Web Design",
  "url": "http://www.systematicwebdesign.com/",
  "excerpt": "Systematic Web Design is a methodology for applying CSS to HTML in a structured, systematic way. It makes it easier to prototype, iterate and scale a web design. This methodology works for any&hellip;",
  "date_saved": "Sat Jul 16 18:11:12 EDT 2016",
  "content": "<div><main class=\"MAIN\">\n\n <p>Systematic Web Design is a methodology for applying CSS to HTML in a structured, systematic way. It makes it easier to prototype, iterate and scale a web design.</p>\n\n <p>This methodology works for any website or web app, but it's particularly helpful in big, complex, long-running projects with lots of collaborators. And it works with both standard CSS and extended CSS languages such as Sass and Less.</p>\n\n <p>Systematic Web Design shares many of the principles of other CSS methodologies including Nicole Sullivan's Object-Oriented CSS (<a href=\"http://github.com/stubbornella/oocss\" rel=\"external\">OOCSS</a>), Yandex's Block Element Modifier (<a href=\"http://bem.info/\" rel=\"external\">BEM</a>), and Jonathan Snook's Scalable and Modular Architecture for CSS (<a href=\"http://smacss.com/\" rel=\"external\">SMACSS</a>).</p>\n\n <div class=\"Box\">\n <a href=\"http://www.kieranpotts.com/books/systematic-web-design.pdf\" rel=\"external\" class=\"img float-right\"><img src=\"http://public.systematicwebdesign.com/images/systematic-web-design-20150901.png\" width=\"150\" alt=\"\"></a>\n <div class=\"box-inner\">\n <h2>Free e-book (PDF)</h2>\n <ul class=\"BenefitsList\">\n <li>Advanced techniques</li>\n <li>Best practices</li>\n <li>More examples</li>\n </ul>\n <a class=\"button\" href=\"http://www.kieranpotts.com/books/systematic-web-design.pdf\" rel=\"external\">Download</a>\n </div>\n </div>\n\n <p>There are four stages to creating a web design using the Systematic methodology:</p>\n\n <ol>\n <li>A dedicated style sheet prepares the default presentation of individual HTML <b><a href=\"http://www.systematicwebdesign.com/#elements\">elements</a></b>.</li>\n <li>A wireframe <b><a href=\"http://www.systematicwebdesign.com/#layout\">layout</a></b> is designed independently of the content that it will accommodate.</li>\n <li>HTML elements are combined to create custom UI <b><a href=\"http://www.systematicwebdesign.com/#widgets\">widgets</a></b>, such as navigation bars and modal popups.</li>\n <li><b><a href=\"http://www.systematicwebdesign.com/#modifiers\">Modifier</a></b> classes bring variety to the presentation of layout sections, elements and widgets.</li>\n </ol>\n\n <h2 id=\"elements\">Elements</h2>\n\n <p>First, set the default presentation for individual HTML elements that will encapsulate content and render interactive controls. Examples include headings, paragraphs, lists, tables, forms, fieldsets, legends, inputs and buttons.</p>\n\n <p>Use naked type selectors to set the default presentation for each element. At this stage do not introduce variations by qualifying the type selectors with classes (we'll do that later when we make our <a href=\"http://www.systematicwebdesign.com/#widgets\">widgets</a> and <a href=\"http://www.systematicwebdesign.com/#modifiers\">modifiers</a>.)</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">h2</span> {\n <span class=\"style-property\">font-size</span>: <span class=\"style-value\">2rem</span>;\n <span class=\"style-property\">line-height</span>: <span class=\"style-value\">1.2</span>;\n <span class=\"style-property\">margin-top</span>: <span class=\"style-value\">2em</span>;\n <span class=\"style-property\">margin-bottom</span>: <span class=\"style-value\">1em</span>;\n}\n\n<span class=\"selector\">h3</span> {\n <span class=\"style-property\">font-size</span>: <span class=\"style-value\">1.4rem</span>;\n <span class=\"style-property\">line-height</span>: <span class=\"style-value\">1.2</span>;\n <span class=\"style-property\">margin-top</span>: <span class=\"style-value\">2em</span>;\n <span class=\"style-property\">margin-bottom</span>: <span class=\"style-value\">1em</span>;\n}</code>\n</pre>\n </figure>\n\n <p>For efficiency, some inheritable typographic styles may be set on the <code>&lt;<span class=\"tag-name\">body</span>&gt;</code> element and allowed to cascade from there.</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">body</span> {\n <span class=\"style-property\">color</span>: <span class=\"style-value\">hsl(0, 0%, 27%)</span>;\n <span class=\"style-property\">font-family</span>: <span class=\"style-value\">Arial, Helvetica, sans-serif</span>;\n <span class=\"style-property\">font-size</span>: <span class=\"style-value\">62.5%</span>;\n}</code>\n</pre>\n </figure>\n\n <p>Pseudo-classes, pseudo-elements and attribute selectors are useful, too.</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">a:hover</span> { <span class=\"style-property\">opacity</span>: <span class=\"style-value\">1</span>; }\n<span class=\"selector\">q::before</span> { <span class=\"style-property\">content</span>: <span class=\"style-value\">' &#xAB;'</span>; }\n<span class=\"selector\">button[disabled]</span> { <span class=\"style-property\">opacity</span>: <span class=\"style-value\">0.5</span>; }</code>\n</pre>\n </figure>\n\n <p>But descendant selectors, child selectors and sibling selectors should be used more sparingly. As a general rule, the default presentation of HTML elements should not be dependant upon the context in which they are used within the wider document.</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">li a</span> {}\n<span class=\"selector\">li &gt; a</span> {}\n<span class=\"selector\">h2 + h3</span> {}\n<span class=\"selector\">h2 ~ p</span> {}</code>\n</pre>\n </figure>\n\n <p>There should certainly never be any rulesets that modify the presentation of content based on where it is located within the layout. Keep these two concerns &#x2013; layout and content &#x2013; separate. Never do this:</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">.MAIN h2</span> {}\n<span class=\"selector\">.SIDEBAR h2</span> {}</code></pre>\n </figure>\n\n <h2 id=\"layout\">Layout</h2>\n\n <p>Next, position a series of boxes to create a layout.</p>\n\n <p>Give each section of the layout a unique class name, written in full upper case with words delimited by underscores. The layout starts out empty &#x2013; we'll add content later.</p>\n\n <figure>\n<pre>\n<code>&lt;<span class=\"tag-name\">body</span>&gt;\n &lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">CONTAINER</span>\"&gt;\n &lt;<span class=\"tag-name\">header</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">BANNER</span>\"&gt;&lt;/<span class=\"tag-name\">header</span>&gt;\n &lt;<span class=\"tag-name\">nav</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">NAVIGATION_PRIMARY</span>\"&gt;&lt;/<span class=\"tag-name\">nav</span>&gt;\n &lt;<span class=\"tag-name\">nav</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">NAVIGATION_SECONDARY</span>\"&gt;&lt;/<span class=\"tag-name\">nav</span>&gt;\n &lt;<span class=\"tag-name\">main</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">MAIN</span>\"&gt;&lt;/<span class=\"tag-name\">main</span>&gt;\n &lt;<span class=\"tag-name\">aside</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">ADVERTS</span>\"&gt;&lt;/<span class=\"tag-name\">aside</span>&gt;\n &lt;<span class=\"tag-name\">footer</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">FOOTER</span>\"&gt;\n &lt;<span class=\"tag-name\">nav</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">SITEMAP</span>\"&gt;&lt;/<span class=\"tag-name\">nav</span>&gt;\n &lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">LEGAL</span>\"&gt;&lt;/<span class=\"tag-name\">div</span>&gt;\n &lt;/<span class=\"tag-name\">footer</span>&gt;\n &lt;/<span class=\"tag-name\">div</span>&gt;\n&lt;/<span class=\"tag-name\">body</span>&gt;</code>\n</pre>\n </figure>\n\n <p>Here are the CSS selectors you'd need for this layout.</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">.CONTAINER</span> {}\n<span class=\"selector\">.BANNER</span> {}\n<span class=\"selector\">.NAVIGATION_PRIMARY</span> {}\n<span class=\"selector\">.NAVIGATION_SECONDARY</span> {}\n<span class=\"selector\">.MAIN</span> {}\n<span class=\"selector\">.ADVERTS</span> {}\n<span class=\"selector\">.FOOTER</span> {}\n<span class=\"selector\">.SIDEBAR</span> {}\n<span class=\"selector\">.LEGAL</span> {}</code>\n</pre>\n </figure>\n\n <p>Do not qualify the class selectors with element types, as that will give you the freedom to swap around sectioning elements in the markup without needing to refactor your style sheets, too. For example, you could easily switch an <code>&lt;<span class=\"tag-name\">aside</span>&gt;</code> for a generic <code>&lt;<span class=\"tag-name\">div</span>&gt;</code>, so changing the semantics of the document.</p>\n\n <p>Once a default layout is in place, you can start to introduce variations for some pages. To do this, give the root <code>&lt;<span class=\"tag-name\">html</span>&gt;</code> element a unique class name, using the same naming convention.</p>\n\n <figure>\n<pre><code>&lt;<span class=\"tag-name\">html</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">SEARCH</span>\"&gt;</code></pre>\n </figure>\n\n <p>Now you can use this root-level class as a namespace to modify and extend the default layout.</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">html.SEARCH .BANNER</span> {}\n<span class=\"selector\">html.SEARCH .SIDEBAR</span> {}\n<span class=\"selector\">html.SEARCH .PAGINATION</span> {}</code>\n</pre>\n </figure>\n\n <p>Layout should be kept separate from content. We want to have the freedom to move content from one section of the layout to another without needing to change any CSS. So layout classes must not set any properties that will cascade down and affect nested content and interactive controls. Only non-inheritable properties should be applied to layout sections, such as: <code><span class=\"style-property\">display</span></code>, <code><span class=\"style-property\">float</span></code>, <code><span class=\"style-property\">position</span></code>, <code><span class=\"style-property\">top</span></code>, <code><span class=\"style-property\">bottom</span></code>, <code><span class=\"style-property\">left</span></code>, <code><span class=\"style-property\">right</span></code>, <code><span class=\"style-property\">width</span></code>, <code><span class=\"style-property\">height</span></code>, <code><span class=\"style-property\">background</span></code>, <code><span class=\"style-property\">border</span></code>, <code><span class=\"style-property\">margin</span></code>, <code><span class=\"style-property\">padding</span></code> and <code><span class=\"style-property\">z-index</span></code>.</p>\n\n \n\n <p>HTML's extensive suite of native element types still does not provide us with a large enough vocabulary from which we can design rich, modern web interfaces. We often need to group together multiple HTML elements to compose custom UI components. We might for example combine an <code>&lt;<span class=\"tag-name\">input</span>&gt;</code> control with a <code>&lt;<span class=\"tag-name\">button</span>&gt;</code> to create a search box, or repurpose the <code>&lt;<span class=\"tag-name\">ul</span>&gt;</code> element to make a navigation menu.</p>\n\n <p>We could just place these things directly inside the sections of the layout where we want them to go.</p>\n\n <figure>\n<pre>\n<code>&lt;<span class=\"tag-name\">nav</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">NAVIGATION</span>\"&gt;\n &lt;<span class=\"tag-name\">ul</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">./</span>\"&gt;<span class=\"content\">Home</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">about.html</span>\"&gt;<span class=\"content\">About</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">learn/</span>\"&gt;<span class=\"content\">Learn</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">extend/</span>\"&gt;<span class=\"content\">Extend</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">share/</span>\"&gt;<span class=\"content\">Share</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;/<span class=\"tag-name\">ul</span>&gt;\n &lt;<span class=\"tag-name\">form</span> <span class=\"attr-name\">action</span>=\"<span class=\"attr-value\">search.html</span>\" <span class=\"attr-name\">method</span>=\"<span class=\"attr-value\">get</span>\"&gt;\n &lt;<span class=\"tag-name\">label</span> <span class=\"attr-name\">for</span>=\"<span class=\"attr-value\">input-search</span>\"&gt;<span class=\"content\">Search</span>&lt;/<span class=\"tag-name\">label</span>&gt;\n &lt;<span class=\"tag-name\">input</span> <span class=\"attr-name\">name</span>=\"<span class=\"attr-value\">q</span>\" <span class=\"attr-name\">type</span>=\"<span class=\"attr-value\">search</span>\" <span class=\"attr-name\">id</span>=\"<span class=\"attr-value\">input-search</span>\" /&gt;\n &lt;<span class=\"tag-name\">button</span> <span class=\"attr-name\">type</span>=\"<span class=\"attr-value\">submit</span>\"&gt;<span class=\"content\">Search</span>&lt;/<span class=\"tag-name\">button</span>&gt;\n &lt;/<span class=\"tag-name\">form</span>&gt;\n&lt;/<span class=\"tag-name\">nav</span>&gt;</code>\n</pre>\n </figure>\n\n <p>We'd then modify the default presentation of each element by using the class of the parent section as a namespace to encapsulate the changes.</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">.NAVIGATION ul</span> {}\n<span class=\"selector\">.NAVIGATION li</span> {}\n<span class=\"selector\">.NAVIGATION a</span> {}\n<span class=\"selector\">.NAVIGATION form</span> {}\n<span class=\"selector\">.NAVIGATION label</span> {}\n<span class=\"selector\">.NAVIGATION input</span> {}\n<span class=\"selector\">.NAVIGATION button</span> {}</code>\n</pre>\n </figure>\n\n <p>The big disadvantage of this approach is that the presentation of content &#x2013; in this case, a navigation menu and search box &#x2013; is tightly coupled to its location in a particular part of the layout. This is inflexible. We can't reuse stuff or move things around in the HTML without triggering wider refactoring of our style sheets, too.</p>\n\n <p>A better approach is to identify recurring patterns of content in our designs and to bundle them up into independent modules of markup and styling (and optionally scripting).</p>\n\n <p>We need a name for these custom UI components. Let's call them \"widgets\".</p>\n\n <p>A widget could be something simple like a search box or a navigation menu. Or it could be something more complex and dynamic like a modal popup, a slideshow or a real-time user comment feed.</p>\n\n <p>Some widgets may be used on every page of a website. Others may be rolled out only occasionally.</p>\n\n <p>Creating widgets is easy. Simply encapsulate the markup for each widget in a unique class. Use the camel case naming convention for widget classes, to distinguish them from layout classes: <code>\"<span class=\"attr-value\">WidgetName</span>\"</code>.</p>\n\n <p>Below, the content for our navigation menu is now encapsulated in a new <code>&lt;<span class=\"tag-name\">div</span>&gt;</code> element which is given the class <code>\"<span class=\"attr-value\">NavBar</span>\"</code>. And the markup for our search box is now encapsulated in another <code>&lt;<span class=\"tag-name\">div</span>&gt;</code> which is given the class <code>\"<span class=\"attr-value\">SearchBox</span>\"</code>.</p>\n\n <figure>\n<pre>\n<code>&lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">NavBar</span>\"&gt;\n &lt;<span class=\"tag-name\">ul</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">./</span>\"&gt;<span class=\"content\">Home</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">about.html</span>\"&gt;<span class=\"content\">About</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">learn/</span>\"&gt;<span class=\"content\">Learn</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">extend/</span>\"&gt;<span class=\"content\">Extend</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">share/</span>\"&gt;<span class=\"content\">Share</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;/<span class=\"tag-name\">ul</span>&gt;\n&lt;/<span class=\"tag-name\">div</span>&gt;\n\n&lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">SearchBox</span>\"&gt;\n &lt;<span class=\"tag-name\">form</span> <span class=\"attr-name\">action</span>=\"<span class=\"attr-value\">search.html</span>\" <span class=\"attr-name\">method</span>=\"<span class=\"attr-value\">get</span>\"&gt;\n &lt;<span class=\"tag-name\">label</span> <span class=\"attr-name\">for</span>=\"<span class=\"attr-value\">input-search</span>\"&gt;<span class=\"content\">Search</span>&lt;/<span class=\"tag-name\">label</span>&gt;\n &lt;<span class=\"tag-name\">input</span> <span class=\"attr-name\">name</span>=\"<span class=\"attr-value\">q</span>\" <span class=\"attr-name\">type</span>=\"<span class=\"attr-value\">search</span>\" <span class=\"attr-name\">id</span>=\"<span class=\"attr-value\">input-search</span>\" /&gt;\n &lt;<span class=\"tag-name\">button</span> <span class=\"attr-name\">type</span>=\"<span class=\"attr-value\">submit</span>\"&gt;<span class=\"content\">Search</span>&lt;/<span class=\"tag-name\">button</span>&gt;\n &lt;/<span class=\"tag-name\">form</span>&gt;\n&lt;/<span class=\"tag-name\">div</span>&gt;</code>\n</pre>\n </figure>\n\n <p>Here's the full and final markup, with our new <code>\"<span class=\"attr-value\">NavBar</span>\"</code> and <code>\"<span class=\"attr-value\">SearchBox</span>\"</code> widgets nested back inside the original <code>\"<span class=\"attr-value\">NAVIGATION</span>\"</code> section of the layout.</p>\n\n <figure>\n<pre>\n<code>&lt;<span class=\"tag-name\">nav</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">NAVIGATION</span>\"&gt;\n\n <code>&lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">NavBar</span>\"&gt;\n &lt;<span class=\"tag-name\">ul</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">./</span>\"&gt;<span class=\"content\">Home</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">about.html</span>\"&gt;<span class=\"content\">About</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">learn/</span>\"&gt;<span class=\"content\">Learn</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">extend/</span>\"&gt;<span class=\"content\">Extend</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span>&gt;&lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">share/</span>\"&gt;<span class=\"content\">Share</span>&lt;/<span class=\"tag-name\">a</span>&gt;&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;/<span class=\"tag-name\">ul</span>&gt;\n &lt;/<span class=\"tag-name\">div</span>&gt;\n\n &lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">SearchBox</span>\"&gt;\n &lt;<span class=\"tag-name\">form</span> <span class=\"attr-name\">action</span>=\"<span class=\"attr-value\">search.html</span>\" <span class=\"attr-name\">method</span>=\"<span class=\"attr-value\">get</span>\"&gt;\n &lt;<span class=\"tag-name\">label</span> <span class=\"attr-name\">for</span>=\"<span class=\"attr-value\">input-search</span>\"&gt;<span class=\"content\">Search</span>&lt;/<span class=\"tag-name\">label</span>&gt;\n &lt;<span class=\"tag-name\">input</span> <span class=\"attr-name\">name</span>=\"<span class=\"attr-value\">q</span>\" <span class=\"attr-name\">type</span>=\"<span class=\"attr-value\">search</span>\" <span class=\"attr-name\">id</span>=\"<span class=\"attr-value\">input-search</span>\" /&gt;\n &lt;<span class=\"tag-name\">button</span> <span class=\"attr-name\">type</span>=\"<span class=\"attr-value\">submit</span>\"&gt;<span class=\"content\">Search</span>&lt;/<span class=\"tag-name\">button</span>&gt;\n &lt;/<span class=\"tag-name\">form</span>&gt;\n &lt;/<span class=\"tag-name\">div</span>&gt;</code>\n\n&lt;/<span class=\"tag-name\">nav</span>&gt;</code>\n</pre>\n </figure>\n\n <p>We don't need anymore to use the class name of the parent layout section as a means of encapsulating the presentation of the nested widgets. We use each widgets' own unique class name for that.</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">.NavBar</span> {}\n<span class=\"selector\">.NavBar ul</span> {}\n<span class=\"selector\">.NavBar li</span> {}\n<span class=\"selector\">.NavBar a</span> {}\n<span class=\"selector\">.NavBar a:hover</span> {}\n\n<span class=\"selector\">.SearchBox</span> {}\n<span class=\"selector\">.SearchBox form</span> {}\n<span class=\"selector\">.SearchBox label</span> {}\n<span class=\"selector\">.SearchBox input</span> {}\n<span class=\"selector\">.SearchBox button</span> {}</code>\n</pre>\n </figure>\n\n <p>Because the presentation of the NavBar and SearchBox widgets is no longer dependant upon the markup for those widgets being placed in a certain position within the layout, we can now more easily reuse the same widgets in different contexts. We can copy-and-paste their markup into different sections of the layout and their presentation will remain intact.</p>\n\n <h2 id=\"modifiers\">Modifiers</h2>\n\n <p>Sometimes you will want to vary the presentation of a single instance of an HTML element, a widget, or a section of the layout. To do that, add a modifier class.</p>\n\n <p>Modifiers are written full lower case with words delimited by hyphens: <code>\"<span class=\"attr-value\">modifier-name</span>\"</code>.</p>\n\n <p>Modifiers may be defined as globals, which means they can be applied to just about anything. Be explicit in your intention and include the universal selector (<code><span class=\"selector\">*</span></code>) when defining global modifiers.</p>\n\n <figure>\n<pre><code><span class=\"selector\">*.ssh</span> { <span class=\"style-property\">color</span>: <span class=\"style-value\">#999</span>; }</code></pre>\n </figure>\n\n <p>The problem with global modiiers is that they easily get overridden by higher-specificity selectors. That in turn encourages use of <code>!important</code>. For this reason it is better to design modifiers to be used on specific elements, widgets or layout sections.</p>\n\n <p>Modifiers that are designed to vary the default presentation of specific HTML elements should be qualified with type selectors.</p>\n\n <figure>\n<pre><code><span class=\"selector\">h1.homepage</span> { <span class=\"style-property\">font-size</span>: <span class=\"style-value\">8rem</span>; }</code></pre>\n </figure>\n\n <p>Modifiers that are designed to vary the default presentation of a particular widget should be prefixed with the name of that widget, written lower case. Furthermore, widget modifiers should be additionally qualified with the encapsulating widget class. Like this:</p>\n\n <figure>\n<pre><code><span class=\"selector\">.Popup.popup-alert</span> { <span class=\"style-property\">border-color</span>: <span class=\"style-value\">red</span>; }</code></pre>\n </figure>\n\n <p>The purpose is to reduce as much as possible the chances of the same modifier name being used for two unrelated things, which might result in unwanted style leakages. The prefix also helps us to see in the markup which modifiers belong to which widgets.</p>\n\n <figure>\n<pre><code>&lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">Popup popup-alert</span>\"&gt;\n ...\n&lt;/<span class=\"tag-name\">div</span>&gt;</code></pre>\n </figure>\n\n <p>Modifiers may be needed to target specific elements <em>within</em> a widget structure, too.</p>\n\n <figure>\n<pre><code><span class=\"selector\">.Popup .popup-header</span> { <span class=\"style-property\">padding</span>: <span class=\"style-value\">1rem 2rem</span>; }</code></pre>\n </figure>\n\n <p>Usage:</p>\n\n <figure>\n<pre><code>&lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">Popup popup-alert</span>\"&gt;\n &lt;<span class=\"tag-name\">header</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">popup-header</span>\"&gt;\n ...\n &lt;/<span class=\"tag-name\">header</span>&gt;\n ...\n&lt;/<span class=\"tag-name\">div</span>&gt;\n</code></pre>\n </figure>\n\n <p>Modifiers may be used to vary the default presentation of individual sections of the layout, too. The same rules apply as for widgets:</p>\n\n <figure>\n<pre><code><span class=\"selector\">.NAVIGATION.navigation-is-collapsed</span> { <span class=\"style-property\">height</span>: <span class=\"style-value\">0</span>; }</code></pre>\n </figure>\n\n <p>Usage:</p>\n\n <figure>\n<pre><code>&lt;<span class=\"tag-name\">nav</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">NAVIGATION navigation-is-collapsed</span>\"&gt;\n ...\n&lt;/<span class=\"tag-name\">nav</span>&gt;\n</code></pre>\n </figure>\n\n <p>Modifiers may get dynamically injected into a web page by a client-side JavaScript program. Dynamic modifiers should be prefixed with <code>\"<span class=\"attr-value\">is-</span>\"</code> followed by a verb or noun that describes the component's current state.</p>\n\n <figure>\n<pre>\n<code>&lt;<span class=\"tag-name\">input</span> <span class=\"attr-name\">type</span>=\"<span class=\"attr-value\">text</span>\" <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">is-invalid</span>\" /&gt;</code>\n</pre>\n </figure>\n\n <p>Dynamic modifiers that belong to a particular widget or layout section should be further prefixed with the name of the widget or layout section (written lower case).</p>\n\n <figure>\n<pre>\n<code><span class=\"selector\">.SideNav.sidenav-is-opening</span> {}\n<span class=\"selector\">.SideNav.sidenav-is-open</span> {}\n<span class=\"selector\">.SideNav.sidenav-is-closing</span> {}\n<span class=\"selector\">.SideNav.sidenav-is-closed</span> {}</code>\n</pre>\n </figure>\n\n \n\n <p>Without exception every class must represent the name of a layout section, or the namespace for a widget, or it must exist to modify the default presentation of something. No one class must fuse these separate concerns.</p>\n\n <p>The three types of classes are written differently:</p>\n\n <ul>\n <li>Layout: <code>\"<span class=\"attr-value\">UPPER_CASE</span>\"</code></li>\n <li>Widgets: <code>\"<span class=\"attr-value\">CamelCase</span>\"</code></li>\n <li>Modifiers: <code>\"<span class=\"attr-value\">lower-case</span>\"</code></li>\n </ul>\n\n <p>What's nice about this naming convention is that the hierarchy of classes is represented by their case. Layout classes, written with full capitalisation, scream out from the markup (\"HELLO_WORLD\"). The camel case names of widgets, which always will be nested within layout sections, are a little less prominent (\"HelloWorld\"). And modifier classes, which are arguably the least important classes since they merely modify things and are not critical to achieving a default presentation, are the least conspicuous of all (\"hello-world\").</p>\n\n <p>All three naming conventions can be seen in the following example, which is a fragment of markup from a Trello-like project management application.</p>\n\n <figure>\n<pre>\n<code>&lt;<span class=\"tag-name\">main</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">BOARD</span>\"&gt;\n &lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">List</span>\"&gt;\n &lt;<span class=\"tag-name\">h2</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">list-header</span>\"&gt;\n <span class=\"content\">To do</span>\n &lt;<span class=\"tag-name\">svg</span>&gt;&lt;<span class=\"tag-name\">title</span>&gt;<span class=\"content\">Options</span>&lt;/<span class=\"tag-name\">title</span>&gt;<span class=\"content\">...</span>&lt;/<span class=\"tag-name\">svg</span>&gt;\n &lt;/<span class=\"tag-name\">h2</span>&gt;\n &lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">Card card-is-new</span>\"&gt;\n &lt;<span class=\"tag-name\">a</span> <span class=\"attr-name\">href</span>=\"<span class=\"attr-value\">card/1234</span>\"&gt;\n &lt;<span class=\"tag-name\">h3</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">plaintext</span>\"&gt;<span class=\"content\">Homepage changes</span>&lt;/<span class=\"tag-name\">h3</span>&gt;\n &lt;<span class=\"tag-name\">ul</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">card-members</span>\"&gt;\n &lt;<span class=\"tag-name\">li</span> <span class=\"attr-name\">title</span>=\"<span class=\"attr-value\">Kieran Potts</span>\"&gt;<span class=\"content\">KP</span>&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;<span class=\"tag-name\">li</span> <span class=\"attr-name\">title</span>=\"<span class=\"attr-value\">Maja Sienkiewicz</span>\"&gt;<span class=\"content\">MS</span>&lt;/<span class=\"tag-name\">li</span>&gt;\n &lt;/<span class=\"tag-name\">ul</span>&gt;\n &lt;/<span class=\"tag-name\">a</span>&gt;\n &lt;/<span class=\"tag-name\">div</span>&gt;\n &lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">Card</span>\"&gt;\n <span class=\"content\">...</span>\n &lt;/<span class=\"tag-name\">div</span>&gt;\n &lt;/<span class=\"tag-name\">div</span>&gt;\n &lt;<span class=\"tag-name\">div</span> <span class=\"attr-name\">class</span>=\"<span class=\"attr-value\">List</span>\"&gt;\n <span class=\"content\">...</span>\n &lt;/<span class=\"tag-name\">div</span>&gt;\n&lt;/<span class=\"tag-name\">main</span>&gt;</code>\n</pre>\n </figure>\n\n <p>We can work out from their names and use of capitalisation what each class does. We know that the class <code>\"<span class=\"attr-value\">BOARD</span>\"</code> positions a section of the main layout and that <code>\"<span class=\"attr-value\">List</span>\"</code> and <code>\"<span class=\"attr-value\">Card</span>\"</code> are the names of widgets &#x2013; recurring patterns of content &#x2013; that are reused again and again. We can also deduce that the modifier class <code>\"<span class=\"attr-value\">list-header</span>\"</code> belongs to the List widget, while <code>\"<span class=\"attr-value\">card-members</span>\"</code> belongs to the Card widget. The <code>\"<span class=\"attr-value\">card-is-new</span>\"</code> modifier also belongs to the Card widget but it got put there by a JavaScript plugin that is responsible for adding dynamic behaviours to instances of the Card widget wherever they appear in the markup. And we might guess that the <code>\"<span class=\"attr-value\">plaintext</span>\"</code> modifier makes the <code>&lt;<span class=\"tag-name\">h3</span>&gt;</code> element look more like a standard paragraph, and that because this class is not prefixed it might work on other element types, too.</p>\n\n <p>For further examples of the Systematic Web Design methodology, <a href=\"http://www.kieranpotts.com/books/systematic-web-design.pdf\" rel=\"external\">download the free ebook</a>.</p>\n\n <div class=\"Box\">\n <a href=\"http://www.kieranpotts.com/books/systematic-web-design.pdf\" rel=\"external\" class=\"img float-right\"><img src=\"http://public.systematicwebdesign.com/images/systematic-web-design-20150901.png\" width=\"150\" alt=\"\"></a>\n <div class=\"box-inner\">\n <h2>Free e-book (PDF)</h2>\n <ul class=\"BenefitsList\">\n <li>Advanced techniques</li>\n <li>Best practices</li>\n <li>More examples</li>\n </ul>\n <a class=\"button\" href=\"http://www.kieranpotts.com/books/systematic-web-design.pdf\" rel=\"external\">Download</a>\n </div>\n </div>\n\n </main>\n\n </div>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a39"
  },
  "title": "Building Your First React.js App — Learning New Stuff",
  "url": "https://medium.com/learning-new-stuff/building-your-first-react-js-app-d53b0c98dc#.a1rnyzcwv",
  "excerpt": "This tutorial is suitable from age 3. Credit: Donnie Ray JonesThis article will take you through every step of building the simplest React app possible. Even simpler than a to-do list.",
  "date_saved": "Sat Jul 16 18:11:13 EDT 2016",
  "content": "<div score=\"17.5\"><section name=\"0bfb\" class=\" section--body section--first\" score=\"41.25\"><div class=\"section-content\" score=\"32.5\"><div class=\"section-inner layoutSingleColumn\" score=\"-45.0\"><figure name=\"a5b7\" id=\"a5b7\" class=\"graf--figure graf--first\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*YTqou7X2QcqvyslQHkt_Kw.jpeg\"></div><figcaption class=\"imageCaption\">This tutorial is suitable from age 3. Credit: <a href=\"https://www.flickr.com/photos/donnieray/\" class=\"markup--anchor markup--figure-anchor\" title=\"Go to Donnie Ray Jones's photostream\" rel=\"nofollow\">Donnie Ray Jones</a></figcaption></figure><p name=\"f245\" id=\"f245\" class=\"graf--p graf-after--h4\">This article will take you through <strong class=\"markup--strong markup--p-strong\">every step</strong> of building the simplest React app possible. Even simpler than a to-do list.</p><p name=\"37b9\" id=\"37b9\" class=\"graf--p graf-after--p\">Why so simple? Because I&#x2019;ve found that when I&#x2019;m trying to learn a new technology, even the simplest features can add unnecessary complexity.</p><blockquote name=\"7bed\" id=\"7bed\" class=\"graf--pullquote pullquote graf-after--p\">If you&#x2019;ve never tried React before, this tutorial is for you.</blockquote><p name=\"1d63\" id=\"1d63\" class=\"graf--p graf-after--pullquote\">There are<strong class=\"markup--strong markup--p-strong\"> no pre-requisites </strong>other than basic Javascript and HTML skills. Though if you&#x2019;d like to read some basic theory before getting started with the coding, you can read the article below and then return.</p><p name=\"6521\" id=\"6521\" class=\"graf--p graf-after--h3\">To claim you&#x2019;ll be building an app is actually an exaggeration. It&#x2019;s only a profile page, as you can see below. (The image is taken randomly from <a href=\"http://lorempixel.com/\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">http://lorempixel.com/</a>)</p><figure name=\"45e6\" id=\"45e6\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*jKHL1tfIYyZ5lIXvmRwa9g.png\"></div></figure><p name=\"da2f\" id=\"da2f\" class=\"graf--p graf-after--h4\">React is built around <strong class=\"markup--strong markup--p-strong\">components; </strong>everything you see on the page is a part of a component. Before we start coding, it&#x2019;s a good idea to create a sketch of the components, as we&#x2019;ve done above.</p><p name=\"fd24\" id=\"fd24\" class=\"graf--p graf-after--p\">The main component&#x200A;&#x2014;&#x200A;which wrap all other components&#x200A;&#x2014;&#x200A;is marked in red. We&#x2019;ll call this one <em class=\"markup--em markup--p-em\">App</em>.</p><p name=\"cf7d\" id=\"cf7d\" class=\"graf--p graf-after--p\">Once we&#x2019;ve figured out that <em class=\"markup--em markup--p-em\">App</em> is our main component, we&#x2019;ll need to ask ourselves: which direct children does <em class=\"markup--em markup--p-em\">App </em>have?</p><p name=\"e17b\" id=\"e17b\" class=\"graf--p graf-after--p\">I&#x2019;d argue that the name and the profile image can be grouped into one component, which we&#x2019;ll call <em class=\"markup--em markup--p-em\">Profile </em>(green rectangle)<em class=\"markup--em markup--p-em\">, </em>and the <em class=\"markup--em markup--p-em\">Hobbies</em> section can be another component (blue rectangle).</p><p name=\"b42e\" id=\"b42e\" class=\"graf--p graf-after--p\">The structure of our components can also be visualized like this:</p><pre name=\"ef8d\" id=\"ef8d\" class=\"graf--pre graf-after--p\">- App<br> - Profile<br> - Hobbies</pre><blockquote name=\"155a\" id=\"155a\" class=\"graf--blockquote graf-after--pre\">We could split the component further; like ProfileImage and HobbyItem, though we&#x2019;ll stop here for the sake of simplicity.</blockquote><p name=\"7ee7\" id=\"7ee7\" class=\"graf--p graf-after--h4\">Before you begin coding, you&#x2019;ll need to download the source file. It&#x2019;s available at <a href=\"https://github.com/perborgen/YourFirstReactProject\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">this GitHub repo.</a> Simply copy or clone it and open the <em class=\"markup--em markup--p-em\">index.html</em> file in the browser. (The full code is available in the <em class=\"markup--em markup--p-em\">finished_project.html</em> file.)</p><p name=\"d420\" id=\"d420\" class=\"graf--p graf-after--p\">I&#x2019;ve setup the file properly, so you&#x2019;ll see links to the React source and the other necessary libraries in the &lt;head/&gt; section of the file. Your code will start at line 12.</p><blockquote name=\"f9bf\" id=\"f9bf\" class=\"graf--blockquote graf-after--p\">For a proper React project you wouldn&#x2019;t use this toy setup. But I don&#x2019;t want this tutorial to be about anything else than coding in React, so we&#x2019;ll keep it simple.</blockquote><p name=\"2697\" id=\"2697\" class=\"graf--p graf-after--blockquote\">Let&#x2019;s write our first component:</p><figure name=\"af79\" id=\"af79\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*NLIMG74J43OveO18x19Qvg.png\"></div></figure><p name=\"6638\" id=\"6638\" class=\"graf--p graf-after--figure\">As you can see on the first line, we create a component be calling the <em class=\"markup--em markup--p-em\">createClass</em> method on the React object.</p><p name=\"96d4\" id=\"96d4\" class=\"graf--p graf-after--p\">We pass in one parameter, the so called <strong class=\"markup--strong markup--p-strong\">specification object.</strong> This object can have as many methods you want, though the most important one is the <em class=\"markup--em markup--p-em\">render </em>method. In the <em class=\"markup--em markup--p-em\">render </em>method, you&#x2019;ll return what you want React to draw on the page. In our case, we simply want a <em class=\"markup--em markup--p-em\">div </em>tag with the text &#x201C;Hello World&#x201D;.</p><p name=\"097c\" id=\"097c\" class=\"graf--p graf-after--p\">Then follow up this:</p><figure name=\"8077\" id=\"8077\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*ywkSGo7l3eHXcg9LGAxXWg.png\"></div></figure><p name=\"43fd\" id=\"43fd\" class=\"graf--p graf-after--figure\">This is how we specify where on the page we want the <em class=\"markup--em markup--p-em\">App </em>component to be rendered. This is done by calling <em class=\"markup--em markup--p-em\">ReactDOM.render, </em>passing in the <em class=\"markup--em markup--p-em\">App</em> component as the first argument and a reference to a <em class=\"markup--em markup--p-em\">div</em> with the id of <em class=\"markup--em markup--p-em\">content </em>as the second. <strong class=\"markup--strong markup--p-strong\">Our entire app</strong> will go into this <em class=\"markup--em markup--p-em\">content div.</em></p><blockquote name=\"04c3\" id=\"04c3\" class=\"graf--blockquote graf-after--p\">This syntax might seem a bit weird: we&#x2019;re taking a Javascript variable (<em class=\"markup--em markup--blockquote-em\">App</em>) and turn it into what looks like an HTML/XML tag. <strong class=\"markup--strong markup--blockquote-strong\">This is called JSX. </strong>Read more about JSX in the <a href=\"https://medium.com/learning-new-stuff/learn-react-js-in-7-min-92a1ef023003#.b2tr5yuzz\" class=\"markup--anchor markup--blockquote-anchor\">React.js in 8 minutes article.</a></blockquote><p name=\"7be7\" id=\"7be7\" class=\"graf--p graf-after--blockquote\">Refresh the page and you&#x2019;ll see &#x2018;Hello World&#x2019; printed out on the screen.</p><p name=\"5278\" id=\"5278\" class=\"graf--p graf-after--h4\">Let&#x2019;s add some more components. Looking back at our component overview, we see that the <em class=\"markup--em markup--p-em\">App</em> component has got two children called <em class=\"markup--em markup--p-em\">Profile</em> and <em class=\"markup--em markup--p-em\">Hobbies</em>.</p><p name=\"d271\" id=\"d271\" class=\"graf--p graf-after--p\">Let&#x2019;s write out these two components. We&#x2019;ll begin with <em class=\"markup--em markup--p-em\">Profile:</em></p><figure name=\"6e54\" id=\"6e54\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*XsBbwYFKcXKoYZ630-NQqw.png\"></div></figure><p name=\"6fe8\" id=\"6fe8\" class=\"graf--p graf-after--figure\">There is actually nothing new here. Just a bit more content i the return statement than it was in <em class=\"markup--em markup--p-em\">App.</em></p><p name=\"d654\" id=\"d654\" class=\"graf--p graf-after--p\">Let&#x2019;s write the <em class=\"markup--em markup--p-em\">Hobbies</em> component:</p><figure name=\"37b4\" id=\"37b4\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*N5pgeSVMeQ8gqOFvt0vlGQ.png\"></div></figure><p name=\"a78d\" id=\"a78d\" class=\"graf--p graf-after--figure\">If you refresh the page again though, you won&#x2019;t see any of these components.</p><p name=\"7d21\" id=\"7d21\" class=\"graf--p graf-after--p\">This is because only the <em class=\"markup--em markup--p-em\">App </em>component has been rendered into the DOM.</p><p name=\"5064\" id=\"5064\" class=\"graf--p graf-after--p\">We&#x2019;ll need to modify the <em class=\"markup--em markup--p-em\">App </em>component in order to actually turn <em class=\"markup--em markup--p-em\">Profile</em> and <em class=\"markup--em markup--p-em\">Hobbies</em> into <em class=\"markup--em markup--p-em\">App&#x2019;s</em> children.</p><p name=\"b00c\" id=\"b00c\" class=\"graf--p graf-after--p\">This is what we&#x2019;ll need to do:</p><figure name=\"37b0\" id=\"37b0\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*eSWfi8Fp1pUxiM7ypNDmEA.png\"></div></figure><p name=\"dd40\" id=\"dd40\" class=\"graf--p graf-after--figure\">If you refresh the page again you&#x2019;ll see that all the content appears on the page. (Though the image wont appear, as we&#x2019;ve only added a dummy link to it).</p><p name=\"ce3a\" id=\"ce3a\" class=\"graf--p graf-after--h4\">Now that we have the basic structure setup, we&#x2019;re ready to add the correct data to our project.</p><p name=\"47dd\" id=\"47dd\" class=\"graf--p graf-after--p\">React has something called a <strong class=\"markup--strong markup--p-strong\">one directional data flow</strong>, meaning that the data is passed down from parent to child components.</p><p name=\"9a05\" id=\"9a05\" class=\"graf--p graf-after--p\">Above all the components, paste in the following code:</p><pre name=\"9c55\" id=\"9c55\" class=\"graf--pre graf-after--p\">var DATA = { <br> name: 'John Smith',<br> imgURL: '<a href=\"http://lorempixel.com/200/200/\" class=\"markup--anchor markup--pre-anchor\" rel=\"nofollow\">http://lorempixel.com/200/200/</a>',<br> hobbyList: ['coding', 'writing', 'skiing']<br>}</pre><p name=\"f40e\" id=\"f40e\" class=\"graf--p graf-after--pre\">You can imagine this data being fetched from an API of something.</p><p name=\"1ad8\" id=\"1ad8\" class=\"graf--p graf-after--p\">The next thing you&#x2019;ll need to do is add this data to the <em class=\"markup--em markup--p-em\">App </em>components as its <strong class=\"markup--strong markup--p-strong\">props.</strong></p><blockquote name=\"817e\" id=\"817e\" class=\"graf--blockquote graf-after--p\">Data in React is either handled as <strong class=\"markup--strong markup--blockquote-strong\">props</strong> or <strong class=\"markup--strong markup--blockquote-strong\">state. </strong>We&#x2019;re only going to care about <strong class=\"markup--strong markup--blockquote-strong\">props </strong>in this tutorial. In general, <strong class=\"markup--strong markup--blockquote-strong\">props</strong> is immutable and can be shared across components, while <strong class=\"markup--strong markup--blockquote-strong\">state</strong> is mutable and private. This is better explained in <a href=\"https://medium.com/learning-new-stuff/learn-react-js-in-7-min-92a1ef023003#.b2tr5yuzz\" class=\"markup--anchor markup--blockquote-anchor\">this article.</a></blockquote><p name=\"4935\" id=\"4935\" class=\"graf--p graf-after--blockquote\">Below, you&#x2019;ll see how you pass the data into the <em class=\"markup--em markup--p-em\">App </em>component, by simply changing a little bit on the <em class=\"markup--em markup--p-em\">ReactDOM.render</em> method. It&#x2019;s similar to how you&#x2019;d add attributes in normal HTML.</p><figure name=\"d8f8\" id=\"d8f8\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*tbpzl5NIo9CSLzyRTtzC_A.png\"></div></figure><p name=\"0c59\" id=\"0c59\" class=\"graf--p graf-after--figure\">The curly bracket tells React that we&#x2019;re escaping out of the JSX syntax in order to add a Javascript expression (DATA).</p><p name=\"c161\" id=\"c161\" class=\"graf--p graf-after--p\">Now we&#x2019;re able to access this data from within the <em class=\"markup--em markup--p-em\">App </em>component through <em class=\"markup--em markup--p-em\">this.props.profileData. </em>However, the App component is simply a wrapper around the <em class=\"markup--em markup--p-em\">Profile</em> and <em class=\"markup--em markup--p-em\">Hobbies</em> components, so we&#x2019;re going to send the data further down the hierarchy, using the same technique as described above.</p><p name=\"a949\" id=\"a949\" class=\"graf--p graf-after--p\">This is how we pass the data from App to its children:</p><figure name=\"6aad\" id=\"6aad\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*rUH8Y52kv5EMxT8-pxlqWA.png\"></div></figure><p name=\"482b\" id=\"482b\" class=\"graf--p graf-after--figure\">We&#x2019;re passing down the <em class=\"markup--em markup--p-em\">profileImage</em> and <em class=\"markup--em markup--p-em\">name</em> to the <em class=\"markup--em markup--p-em\">Profile</em> component, while only the <em class=\"markup--em markup--p-em\">hobbyList</em> array down to the <em class=\"markup--em markup--p-em\">Hobbies</em> component. This is because the <em class=\"markup--em markup--p-em\">Hobbies</em> component doesn&#x2019;t need the rest of the data; it&#x2019;s simply going to display a list of hobbies.</p><p name=\"7b15\" id=\"7b15\" class=\"graf--p graf-after--p\">Let&#x2019;s look at how we&#x2019;ll need to rewrite the <em class=\"markup--em markup--p-em\">Profile</em> component order to use the data we&#x2019;ve passed down to it:</p><figure name=\"70f3\" id=\"70f3\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*guE377pneicTO4uWLJNa9A.png\"></div></figure><p name=\"11f6\" id=\"11f6\" class=\"graf--p graf-after--figure\">We simply escape out of the JSX syntax by curly brackets and fetch the data from <em class=\"markup--em markup--p-em\">this.props.</em></p><p name=\"330a\" id=\"330a\" class=\"graf--p graf-after--p\">In the Hobbies component we&#x2019;ll need to use a technique for looping through the of hobbies.</p><figure name=\"00f7\" id=\"00f7\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*JuQ1TaTndDxfq9ZMYb17hA.png\"></div></figure><p name=\"32ce\" id=\"32ce\" class=\"graf--p graf-after--figure\">As you can see, we&#x2019;re looping through the hobbies array stored in <em class=\"markup--em markup--p-em\">this.props.hobbies.</em> We&#x2019;re using the array prototype method <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">map</a>, which creates a new array based on whatever we return within the callback function.</p><blockquote name=\"bec1\" id=\"bec1\" class=\"graf--blockquote graf-after--p\">Notice that we&#x2019;re creating a <strong class=\"markup--strong markup--blockquote-strong\">key</strong> attribute, an giving it the value <strong class=\"markup--strong markup--blockquote-strong\">index</strong>. This has to be a unique key for each element, as React needs it to properly keep track of the elements we created dynamically. However, don&#x2019;t use the <strong class=\"markup--strong markup--blockquote-strong\">index</strong> if the mapped results might change, as it&#x2019;ll be prone to bugs. It&#x2019;ll work fine in this scenario though, so we&#x2019;ll use it for the sake of simplicity.</blockquote><p name=\"1542\" id=\"1542\" class=\"graf--p graf-after--blockquote\">Once we&#x2019;ve stored all the list elements in the <em class=\"markup--em markup--p-em\">hobbies </em>variable, we simply add it to the return statement, so it&#x2019;ll be rendered out on the screen.</p><p name=\"88ec\" id=\"88ec\" class=\"graf--p graf-after--p\">This is the full code:</p><figure name=\"b7a5\" id=\"b7a5\" class=\"graf--figure graf-after--p\" score=\"-12.5\"><div class=\"aspectRatioPlaceholder is-locked\" score=\"6.25\"><img class=\"graf-image\" src=\"https://cdn-images-1.medium.com/max/800/1*GwqPrFnpPal72u-7Fm8CcQ.png\"></div></figure><p name=\"4120\" id=\"4120\" class=\"graf--p graf-after--figure\">Congrats, you&#x2019;ve just built your first React.js project!</p></div></div></section><section name=\"beb6\" class=\" section--body section--last\" score=\"41.25\"><div class=\"section-content\" score=\"31.25\"><div class=\"section-inner layoutSingleColumn\"><p name=\"bade\" id=\"bade\" class=\"graf--p graf--first\">Thanks for reading! My name is Per Borgen and I mostly write about learning new stuff.</p><p name=\"691e\" id=\"691e\" class=\"graf--p graf-after--p\">Follow me on <a href=\"https://twitter.com/OsloKommunePer\" class=\"markup--anchor markup--p-anchor\" rel=\"nofollow\">Twitter</a> I you want to be notified about new articles.</p><p name=\"338e\" id=\"338e\" class=\"graf--p graf-after--p graf--last\">If you have a question, simply send me an email. I answer every mail I get: <a class=\"__cf_email__\" href=\"https://medium.com/cdn-cgi/l/email-protection\">[email&#xA0;protected]</a></p></div></div></section></div>"
}, {
  "_id": {
    "$oid": "599dbee53a35526adc921a3a"
  },
  "title": "4 JavaScript Design Patterns You Should Know",
  "url": "https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know",
  "excerpt": "The Scotchmas Day 2 giveaway can be found at the end of this article. Every developer strives to write maintainable, readable, and reusable code. Code structuring becomes more important as&hellip;",
  "date_saved": "Sat Jul 16 18:11:14 EDT 2016",
  "content": "<div><div class=\"content\">\n\n \n <p><em>The <a href=\"https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know#scotchmas-day-2-giveaway\">Scotchmas Day 2 giveaway</a> can be found at the end of this article.</em></p>\n<p>Every developer strives to write maintainable, readable, and reusable code. Code structuring becomes more important as applications become larger. Design patterns prove crucial to solving this challenge &#x2013; providing an organization structure for common issues in a particular circumstance.</p>\n<p>JavaScript web developers frequently interact with design patterns, even unknowingly, when creating applications.</p>\n<p>Although there is a diverse list of design patterns used in certain circumstances, JavaScript developers tend to use some patterns customarily more than others.</p>\n<p>In this post, I want to discuss these common patterns to expose ways to improve your programming repertoire and dive deeper into the JavaScript internals.</p>\n<p>The design patterns in question include the following:</p>\n<ul>\n<li>Module</li>\n<li>Prototype</li>\n<li>Observer</li>\n<li>Singleton</li>\n</ul>\n<p>Each pattern consists of many properties, though, I will emphasize the following key points:</p>\n<ol>\n<li><strong>Context</strong>: Where/under what circumstances is the pattern used?</li>\n<li><strong>Problem</strong>: What are we trying to solve?</li>\n<li><strong>Solution</strong>: How does using this pattern solve our proposed problem? </li>\n<li><strong>Implementation</strong>: What does the implementation look like?</li>\n</ol>\n<h2>Module Design Pattern</h2>\n<p>JavaScript modules are the most prevalently used design patterns for keeping particular pieces of code independent of other components. This provides loose coupling to support well-structured code.</p>\n<p>For those that are familiar with object-oriented languages, modules are JavaScript &#x201C;classes&#x201D;. One of the many advantages of classes is <em>encapsulation</em> &#x2013; protecting states and behaviors from being accessed from other classes. The module pattern allows for public and private (plus the lesser-know protected and privileged) access levels.</p>\n<p>Modules should be Immediately-Invoked-Function-Expressions (IIFE) to allow for private scopes &#x2013; that is, a closure that protect variables and methods (however, it will return an object instead of a function). This is what it looks like:</p>\n<pre><code class=\"language-javascript\">\n(function() {\n\n // declare private variables and/or functions\n\n return {\n // declare public variables and/or functions\n }\n\n})();\n</code>\n</pre>\n<p>Here we instantiate the private variables and/or functions before returning our object that we want to return. Code outside of our closure is unable to access these private variables since it is not in the same scope. Let&#x2019;s take a more concrete implementation:</p>\n<pre><code class=\"language-javascript\">\nvar HTMLChanger = (function() {\n var contents = 'contents'\n\n var changeHTML = function() {\n var element = document.getElementById('attribute-to-change');\n element.innerHTML = contents;\n }\n\n return {\n callChangeHTML: function() {\n changeHTML();\n console.log(contents);\n }\n };\n\n})();\n\nHTMLChanger.callChangeHTML(); // Outputs: 'contents'\nconsole.log(HTMLChanger.contents); // undefined\n</code></pre>\n<p>Notice that <code>callChangeHTML</code> binds to the returned object and can be referenced within the <code>HTMLChanger</code> namespace. However, when outside the module, contents are unable to be referenced.</p>\n<h3>Revealing Module Pattern</h3>\n<p>A variation of the module pattern is called the <strong>Revealing Module Pattern</strong>. The purpose is to maintain encapsulation and reveal certain variables and methods returned in an object literal. The direct implementation looks like this:</p>\n<pre><code class=\"language-javascript\">\nvar Exposer = (function() {\n var privateVariable = 10;\n\n var privateMethod = function() {\n console.log('Inside a private method!');\n privateVariable++;\n }\n\n var methodToExpose = function() {\n console.log('This is a method I want to expose!');\n }\n\n var otherMethodIWantToExpose = function() {\n privateMethod();\n }\n\n return {\n first: methodToExpose,\n second: otherMethodIWantToExpose\n };\n})();\n\nExposer.first(); // Output: This is a method I want to expose!\nExposer.second(); // Output: Inside a private method!\nExposer.methodToExpose; // undefined\n\n</code></pre>\n<p>Although this looks much cleaner, an obvious disadvantage is unable to reference the private methods. This can pose unit testing challenges. Similarly, the public behaviors are non-overridable.</p>\n<h2>Prototype Design Pattern</h2>\n<p>Any JavaScript developer has either seen the keyword <strong>prototype</strong>, confused by the prototypical inheritance, or implemented prototypes in their code. The Prototype design pattern relies on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">JavaScript prototypical inheritance</a>. The prototype model is used mainly for creating objects in performance-intensive situations.</p>\n<p>The objects created are clones (shallow clones) of the original object that are passed around. One use case of the prototype pattern is performing an extensive database operation to create an object used for other parts of the application. If another process needs to use this object, instead of having to perform this substantial database operation, it would be advantageous to clone the previously created object.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/1/14/Prototype_UML.svg\" alt=\"Prototype Design Pattern\"><br>\n</p><caption><a href=\"https://upload.wikimedia.org/wikipedia/commons/1/14/Prototype_UML.svg\">Prototype Design Pattern on <em>Wikipedia</em></a></caption>\n\n<p>This UML describes how a prototype interface is used to clone concrete implementations.</p>\n<p>To clone an object, a constructor must exist to instantiate the first object. Next, by using the keyword <strong>prototype</strong> variables and methods bind to the object&#x2019;s structure. Let&#x2019;s look at a basic example:</p>\n<pre><code class=\"language-javascript\">\nvar TeslaModelS = function() {\n this.numWheels = 4;\n this.manufacturer = 'Tesla';\n this.make = 'Model S';\n}\n\nTeslaModelS.prototype.go = function() {\n // Rotate wheels\n}\n\nTeslaModelS.prototype.stop = function() {\n // Apply brake pads\n}\n</code></pre>\n<p>The constructor allows the creation of a single TeslaModelS object. When a creating new TeslaModelS object, it will retain the states initialized in the constructor. Additionally, maintaining the function <strong>go</strong> and <strong>stop</strong> is easy since we declared them with <strong>prototype</strong>. A synonymous way to extend functions on the prototype as described below:</p>\n<pre><code class=\"language-javascript\">\nvar TeslaModelS = function() {\n this.numWheels = 4;\n this.manufacturer = 'Tesla';\n this.make = 'Model S';\n}\n\nTeslaModelS.prototype = {\n go: function() {\n // Rotate wheels\n },\n stop: function() {\n // Apply brake pads\n }\n}\n</code></pre>\n<h3>Revealing Prototype Pattern</h3>\n<p>Similar to Module pattern, the Prototype pattern also has a revealing variation. The Revealing Prototype Pattern provides encapsulation with public and private members since it returns an object literal.</p>\n<p>Since we are returning an object, we will prefix the prototype object with a <strong>function</strong>. By extending our example above, we can choose what we want to expose in the current prototype to preserve their access levels:</p>\n<pre><code class=\"language-javascript\">\nvar TeslaModelS = function() {\n this.numWheels = 4;\n this.manufacturer = 'Tesla';\n this.make = 'Model S';\n}\n\nTeslaModelS.prototype = function() {\n\n var go = function() {\n // Rotate wheels\n };\n\n var stop = function() {\n // Apply brake pads\n };\n\n return {\n pressBrakePedal: stop,\n pressGasPedal: go\n }\n\n}();\n</code></pre>\n<p>Note how the functions stop and go will be shielded from the returning object due to being outside of returned object&#x2019;s scope. Since JavaScript natively supports prototypical inheritance, there is no need to rewrite underlying features.</p>\n<h2>Observer Design Pattern</h2>\n<p>There are many times when one part of the application changes, other parts needs to be updated. In AngularJS, if the <code>$scope</code> object updates, an event can be triggered to notify another component. The observer pattern incorporates just that &#x2013; if an object is modified it <strong>broadcasts</strong> to dependent objects that a change has occurred.</p>\n<p>Another prime example is the model-view-controller (MVC) architecture; The view updates when the model changes. One benefit is decoupling the view from the model to reduce dependencies.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Observer.svg/1000px-Observer.svg.png\" alt=\"Observer Design Pattern\"><br>\n</p><caption><a href=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/Observer.svg/1000px-Observer.svg.png\">Observer Design Pattern on <em>Wikipedia</em></a></caption>\n\n<p>As shown in the UML diagram, the necessary objects are the <code>subject</code>, <code>observer</code>, and <code>concrete</code> objects. The subject contains references to the concrete observers to notify for any changes. The Observer object is an abstract class that allows for the concrete observers to implements the notify method.</p>\n<p>Let&#x2019;s take a look at an AngularJS example that encompasses the observer pattern through event management.</p>\n<pre><code class=\"language-javascript\">\n// Controller 1\n$scope.$on('nameChanged', function(event, args) {\n $scope.name = args.name;\n});\n\n...\n\n// Controller 2\n$scope.userNameChanged = function(name) {\n $scope.$emit('nameChanged', {name: name});\n};\n</code></pre>\n<p>With the observer pattern, it is important to distinguish the independent object or the <strong>subject</strong>.</p>\n<p>It is important to note that although the observer pattern does offer many advantages, one of the disadvantages is a significant drop in performance as the number of observers increased. One of the most notorious observers is <strong>watchers</strong>. In AngularJS, we can <strong>watch</strong> variables, functions, and objects. The <strong>$$digest</strong> cycle runs and notifies each of the watchers with the new values whenever a scope object is modified.</p>\n<p>We can create our own Subjects and Observers in JavaScript. Let&#x2019;s see how this is implemented:</p>\n<pre><code class=\"language-javascript\">\nvar Subject = function() {\n this.observers = [];\n\n return {\n subscribeObserver: function(observer) {\n this.observers.push(observer);\n },\n unsubscribeObserver: function(observer) {\n var index = this.observers.indexOf(observer);\n if(index &gt; -1) {\n this.observers.splice(index, 1);\n }\n },\n notifyObserver: function(observer) {\n var index = this.observers.indexOf(observer);\n if(index &gt; -1) {\n this.observers[index].notify(index);\n }\n },\n notifyAllObservers: function() {\n for(var i = 0; i &lt; this.observers.length; i++){\n this.observers[i].notify(i);\n };\n }\n };\n};\n\nvar Observer = function() {\n return {\n notify: function(index) {\n console.log(\"Observer \" + index + \" is notified!\");\n }\n }\n}\n\nvar subject = new Subject();\n\nvar observer1 = new Observer();\nvar observer2 = new Observer();\nvar observer3 = new Observer();\nvar observer4 = new Observer();\n\nsubject.subscribeObserver(observer1);\nsubject.subscribeObserver(observer2);\nsubject.subscribeObserver(observer3);\nsubject.subscribeObserver(observer4);\n\nsubject.notifyObserver(observer2); // Observer 2 is notified!\n\nsubject.notifyAllObservers();\n// Observer 1 is notified!\n// Observer 2 is notified!\n// Observer 3 is notified!\n// Observer 4 is notified!\n</code></pre>\n<h3>Publish/Subscribe</h3>\n<p>The Publish/Subscribe pattern, however, uses a topic/event channel that sits between the objects wishing to receive notifications (subscribers) and the object firing the event (the publisher). This event system allows code to define application-specific events that can pass custom arguments containing values needed by the subscriber. The idea here is to avoid dependencies between the subscriber and publisher.</p>\n<p>This differs from the Observer pattern since any subscriber implementing an appropriate event handler to register for and receive topic notifications broadcast by the publisher.</p>\n<p>Many developers choose to aggregate the publish/subscribe design pattern with the observer though there is a distinction. Subscribers in the publish/subscribe pattern are notified through some messaging medium, but observers are notified by implementing a handler similar to the subject.</p>\n<p>In AngularJS, a subscriber &#x2018;subscribes&#x2019; to an event using $on(&#x2018;event&#x2019;, callback), and a publisher &#x2018;publishes&#x2019; an event using $emit(&#x2018;event&#x2019;, args) or $broadcast(&#x2018;event&#x2019;, args).</p>\n<h2>Singleton</h2>\n<p>A Singleton only allows for a single instantiation, but many instances of the same object. The Singleton restricts clients from creating multiple objects, after the first object created, it will return instances of itself.</p>\n<p>Finding use cases for Singletons is difficult for most who have not yet used it prior. One example is using an office printer. If there are ten people in an office, and they all use one printer, ten computers share one printer (instance). By sharing one printer, they share the same resources.</p>\n<pre><code class=\"language-javascript\">\nvar printer = (function () {\n\n var printerInstance;\n\n function create () {\n\n function print() {\n // underlying printer mechanics\n }\n\n function turnOn() {\n // warm up\n // check for paper\n }\n\n return {\n // public + private states and behaviors\n print: print,\n turnOn: turnOn\n };\n }\n\n return {\n getInstance: function() {\n if(!printerInstance) {\n printerInstance = create();\n }\n return printerInstance;\n }\n };\n\n function Singleton () {\n if(!printerInstance) {\n printerInstance = intialize();\n }\n };\n\n})();\n</code></pre>\n<p>The create method is private because we do not want the client to access this, however, notice that the <em>getInstance</em> method is public. Each officer worker can generate a printer instance by interacting with the <em>getInstance</em> method, like so:</p>\n<pre><code class=\"language-javascript\">\nvar officePrinter = printer.getInstance();\n</code></pre>\n<p>In AngularJS, Singletons are prevalent, the most notable being services, factories, and providers. Since they maintain state and provides resource accessing, creating two instances defeats the point of a shared service/factory/provider.</p>\n<p>Race conditions occur in multi-threaded applications when more than one thread tries to access the same resource. Singletons are susceptible to race conditions, such that if no instance were initialized first, two threads could then create two objects instead of returning and instance. This defeats the purpose of a singleton. Therefore, developers must be privy to synchronization when implementing singletons in multithreaded applications.</p>\n<h2>Conclusion</h2>\n<p>Design patterns are frequently used in larger applications, though to understand where one might be advantageous over another, comes with practice.</p>\n<p>Before building any application, you should thoroughly think about each actor and how they interact with one another. After reviewing the <code>Module</code>, <code>Prototype</code>, <code>Observer</code>, and <code>Singleton</code> design patterns, you should be able to identify these patterns and use them in the wild.</p>\n<h2>Scotchmas Day 2 Giveaway</h2>\n<p><a href=\"http://www.rafflecopter.com/rafl/display/8a8bf3a215/\" class=\"rcptr\" rel=\"nofollow\" id=\"rcwidget_cr32059a\">a Rafflecopter giveaway</a> </p>\n\n </div>\n </div>"
}]
